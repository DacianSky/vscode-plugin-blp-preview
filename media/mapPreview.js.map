{"version":3,"sources":["webpack://blp-preview/webpack/bootstrap","webpack://blp-preview/webpack/runtime/make namespace object","webpack://blp-preview/./node_modules/gl-matrix/esm/common.js","webpack://blp-preview/./node_modules/gl-matrix/esm/vec3.js","webpack://blp-preview/./node_modules/gl-matrix/esm/vec4.js","webpack://blp-preview/./node_modules/gl-matrix/esm/quat.js","webpack://blp-preview/./node_modules/gl-matrix/esm/mat3.js","webpack://blp-preview/./src/mapPreview/camera.js","webpack://blp-preview/./src/common/utf8.ts","webpack://blp-preview/./src/common/typecast.ts","webpack://blp-preview/./src/common/binarystream.ts","webpack://blp-preview/./src/common/bytesof.ts","webpack://blp-preview/./src/common/searches.ts","webpack://blp-preview/./src/w3xReader/w3e/corner.ts","webpack://blp-preview/./src/w3xReader/w3e/w3e.ts","webpack://blp-preview/./src/w3xReader/slk.ts","webpack://blp-preview/./src/w3xReader/ini.ts","webpack://blp-preview/./src/w3xReader/MappedData.ts","webpack://blp-preview/./src/mapPreview/variations.ts","webpack://blp-preview/./src/mapPreview/shaders/ground.vert.ts","webpack://blp-preview/./src/mapPreview/shaders/precision.glsl.ts","webpack://blp-preview/./src/mapPreview/shaders/ground.frag.ts","webpack://blp-preview/./src/mapPreview/shaders/cliffs.frag.ts","webpack://blp-preview/./src/mapPreview/shaders/water.frag.ts","webpack://blp-preview/./src/mapPreview/terrainmodel.ts","webpack://blp-preview/./src/w3xReader/doo/randomitem.ts","webpack://blp-preview/./src/w3xReader/doo/randomitemset.ts","webpack://blp-preview/./src/w3xReader/doo/doodad.ts","webpack://blp-preview/./src/w3xReader/doo/terraindoodad.ts","webpack://blp-preview/./src/w3xReader/doo/doo.ts","webpack://blp-preview/./src/common/gl-matrix-addon.ts","webpack://blp-preview/./src/mapPreview/standsequence.ts","webpack://blp-preview/./src/mapPreview/widget.ts","webpack://blp-preview/./src/mapPreview/doodad.ts","webpack://blp-preview/./src/mapPreview/unit.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/droppeditem.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/droppeditemset.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/inventoryitem.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/modifiedability.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/randomunit.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/unit.ts","webpack://blp-preview/./src/w3xReader/unitsdoo/unitsdoo.ts","webpack://blp-preview/./src/mapPreview/mapViewer.ts","webpack://blp-preview/./src/mapPreview/shaders/cliffs.vert.ts","webpack://blp-preview/./src/mapPreview/shaders/water.vert.ts","webpack://blp-preview/./src/common/arrayunique.ts","webpack://blp-preview/./src/mapPreview/index.ts"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","ARRAY_TYPE","Float32Array","Array","create","out","a","x","y","z","Math","hypot","fromValues","set","add","b","scale","normalize","len","sqrt","transformMat4","m","w","random","PI","i","arguments","length","setAxisAngle","axis","rad","s","sin","cos","vecHeap","vecHeap2","quatHeap","twistHeap","getTouchesLength","touch1","touch2","dx","clientX","dy","clientY","SimpleOrbitCamera","constructor","scene","options","this","canvas","viewer","camera","moveSpeed","rotationSpeed","zoomFactor","horizontalAngle","verticalAngle","distance","position","target","twist","mouse","buttons","x2","y2","touchMode","touches","instance","onManualChange","fov","nearClipPlane","farClipPlane","update","window","addEventListener","e","onResize","setTimeout","preventDefault","button","document","rotate","move","deltaY","deltaMode","zoom","targetTouches","push","oldTouch","newTouch","len1","len2","mdxCamera","model","cameras","getTranslation","sequence","frame","counter","getTargetTranslation","targetPosition","getRotation","worldMatrix","moveToAndFace","updateInternalCamera","dirX","directionX","dirY","directionY","width","h","height","aspect","sw","sh","manualChange","factor","max","clientWidth","clientHeight","viewport","perspective","r","theta","atan2","phi","acos","min","ax","ay","az","aw","bz","bw","bx","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","applyInstanceCamera","fieldOfView","decoder","TextDecoder","encoder","TextEncoder","decodeUtf8","buffer","decode","encodeUtf8","utf8","encode","ArrayBuffer","int8","Int8Array","int16","Int16Array","int32","Int32Array","uint8","Uint8Array","uint16","Uint16Array","uint32","Uint32Array","float32","float64","Float64Array","uint8ToInt8","uint8ToInt16","uint8ToInt32","c","d","uint8ToUint16","uint8ToUint32","uint8ToFloat32","uint8ToFloat64","f","g","int8ToUint8","int16ToUint8","int32ToUint8","uint16ToUint8","uint32ToUint8","float32ToUint8","float64ToUint8","BinaryStream","index","byteOffset","byteLength","bytes","bytesOf","uint8array","subarray","remaining","substream","Error","skip","seek","read","start","end","offset","Infinity","boundIndexOf","readNull","indexOf","readBinary","data","String","fromCharCode","readInt8","readInt16","readInt32","readUint8","readUint16","readUint32","readFloat32","readFloat64","readInt8Array","view","isView","l","readInt16Array","readInt32Array","readUint8Array","readUint16Array","readUint32Array","readFloat32Array","readFloat64Array","write","writeUint8Array","writeNull","writeBinary","count","charCodeAt","writeInt8","writeInt16","writeInt32","writeUint8","writeUint16","writeUint32","writeFloat32","writeFloat64","writeInt8Array","writeInt16Array","writeInt32Array","writeUint16Array","writeUint32Array","writeFloat32Array","writeFloat64Array","Corner","groundHeight","waterHeight","mapEdge","ramp","blight","water","boundary","groundTexture","cliffVariation","groundVariation","cliffTexture","layerHeight","load","stream","waterAndEdge","textureAndFlags","variation","cliffTextureAndLayer","save","War3MapW3e","version","tileset","haveCustomTileset","groundTilesets","cliffTilesets","mapSize","centerOffset","corners","row","rows","column","columns","corner","getByteLength","groundTileset","cliffTileset","isWater","isCliff","bottomLeft","bottomRight","topLeft","topRight","cornerTexture","tilesets","texture","cliffGroundIndex","whichCliff","whichTileset","string","SlkFile","startsWith","line","split","token","op","valueString","substring","trim","parseInt","slice","rowCount","lines","biggestColumn","columnCount","firstOfRow","undefined","encoded","join","IniFile","properties","Map","sections","section","match","name","get","key","getSection","MappedDataRow","map","toString","toLowerCase","number","parseFloat","MappedData","file","header","mapped","j","k","entries","property","getRow","getProperty","setRow","values","findRow","expectedValue","cliffVariations","AAAB","AAAC","AABA","AABB","AABC","AACA","AACB","AACC","ABAA","ABAB","ABAC","ABBA","ABBB","ABBC","ABCA","ABCB","ABCC","ACAA","ACAB","ACAC","ACBA","ACBB","ACBC","ACCA","ACCB","ACCC","BAAA","BAAB","BAAC","BABA","BABB","BABC","BACA","BACB","BACC","BBAA","BBAB","BBAC","BBBA","BBCA","BCAA","BCAB","BCAC","BCBA","BCCA","CAAA","CAAB","CAAC","CABA","CABB","CABC","CACA","CACB","CACC","CBAA","CBAB","CBAC","CBBA","CBCA","CCAA","CCAB","CCAC","CCBA","CCCA","cityCliffVariations","getCliffVariation","dir","tag","precision","MdlxModel","ModelViewer","parsers","mdlx","Model","TerrainModel","arrayBuffer","locations","textures","shader","gl","webgl","instancedArrays","extensions","vertexArrayObject","parser","geoset","geosets","vertices","normals","uvs","uvSets","faces","normalsOffset","uvsOffset","vao","attribs","createVertexArrayOES","bindVertexArrayOES","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","bufferSubData","vertexAttribPointer","FLOAT","enableVertexAttribArray","texturesOffset","locationAndTextureBuffer","vertexAttribDivisorANGLE","UNSIGNED_BYTE","faceBuffer","ELEMENT_ARRAY_BUFFER","elements","instances","render","drawElementsInstancedANGLE","TRIANGLES","UNSIGNED_SHORT","RandomItem","id","chance","RandomItemSet","items","item","Doodad","location","angle","skin","flags","life","itemTable","itemSets","editorId","u1","buildVersion","itemSet","size","TerrainDoodad","_version","War3MapDoo","doodads","u2","terrainDoodads","doodad","terrainDoodad","vec3","VEC3_UNIT_Z","sequenceSorter","rarity","WidgetState","quat","vec4","Widget","state","IDLE","addInstance","setScene","worldScene","sequenceEnded","type","sequences","filtered","replace","filterSequences","sort","sequencesLeft","floor","selectSequence","setSequence","randomStandSequence","super","rotateLocal","heapZ","Unit","unit","setTeamColor","player","setVertexColor","uniformScale","DroppedItem","DroppedItemSet","InventoryItem","slot","ModifiedAbility","activeForAutocast","heroLevel","RandomUnit","unknown","hitpoints","mana","droppedItemTable","droppedItemSets","goldAmount","targetAcquisition","heroStrength","heroAgility","heroIntelligence","itemsInInventory","modifiedAbilities","randomFlag","level","itemClass","unitGroup","positionInGroup","randomUnitTables","customTeamColor","waygate","creationNumber","subversion","modifiedAbility","randomUnit","droppedItemSet","itemInInventory","randomUnitTable","War3MapUnitsDoo","units","MapViewer","terrainData","cliffTypesData","waterData","doodadsData","unitsData","tilesetTextures","cliffTextures","waterTextures","maxDeepColor","minDeepColor","maxShallowColor","minShallowColor","instanceBuffer","textureBuffer","variationBuffer","waterBuffer","heightMap","waterHeightMap","cliffHeightMap","waterIndex","buf","groundShader","createShader","groundFrag","cliffShader","cliffsFrag","waterShader","waterFrag","w3e","loadBaseFiles","then","loadTerrainCliffsAndWater","loadDoodadsAndDestructibles","loadUnitsAndItems","path","dataType","message","loadTextArray","loadBlp","promises","loadBaseFile","terrain","cliffTypes","doodadMetaData","destructableData","destructableMetaData","unitData","unitUi","itemData","unitMetaData","customUnit","Promise","all","grid","blightTextureIndex","A","B","C","D","F","G","I","J","K","L","N","O","Q","V","W","X","Y","Z","waterRow","waterHeightOffset","waterIncreasePerFrame","instanceCount","cliffHeights","cornerHeights","waterHeights","cornerTextures","cornerVariations","waterFlags","cliffs","bottomLeftLayer","bottomRightLayer","topLeftLayer","topRightLayer","base","fileName","cliffFileName","bottomLeftTexture","bottomRightTexture","topLeftTexture","topRightTexture","reverse","filter","arr","getVariation","shift","bitset","createTexture","bindTexture","TEXTURE_2D","setTextureMode","CLAMP_TO_EDGE","NEAREST","texImage2D","ALPHA","currentValue","terrainReady","anyReady","cliffPromisesForReal","async","cliff","cliffModels","cliffsReady","console","warn","numVar","endsWith","fileVar","log","unitsReady","startFrame","renderGround","renderCliffs","renderOpaque","renderWater","renderTranslucent","uniforms","instanceAttrib","positionAttrib","texturesAttrib","variationsAttrib","tilesetCount","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","useShader","uniformMatrix4fv","viewProjectionMatrix","uniform2fv","uniform2f","uniform1i","activeTexture","TEXTURE15","uniform1f","isExtended","disable","use","TEXTURE0","TEXTURE1","webglResource","TEXTURE2","isWaterAttrib","depthMask","uniform4fv","handlers","glMatrix","common","getElementById","debugRenderMode","DebugRenderMode","None","addScene","setupCamera","on","addHandler","mdx","blp","dds","tga","querySelector","remove","fetch","resourceBuf","loadResource","ok","ext","requestAnimationFrame","step","timestamp"],"mappings":"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","file":"media/mapPreview.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import { vec3, quat } from 'gl-matrix';\n\n// Backwards compat with existing clients.\nexport function setupCamera(scene, options = {}) {\n  return new SimpleOrbitCamera(scene, options);\n}\n\nconst vecHeap = vec3.create();\nconst vecHeap2 = vec3.create();\nconst quatHeap = quat.create();\nconst twistHeap = new Float32Array(1);\n\n// Get the vector length between two touches.\nfunction getTouchesLength(touch1, touch2) {\n  let dx = touch2.clientX - touch1.clientX;\n  let dy = touch2.clientY - touch1.clientY;\n\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n// Touch modes.\nconst TOUCH_MODE_INVALID = -1;\nconst TOUCH_MODE_ROTATE = 0;\nconst TOUCH_MODE_ZOOM = 1;\n\n// An orbit camera setup example.\n// Left mouse button controls the orbit itself.\n// The right mouse button allows to move the camera and the point it's looking at on the XY plane.\n// Scrolling zooms in and out.\nexport class SimpleOrbitCamera {\n  constructor(scene, options = {}) {\n    this.scene = scene;\n    this.canvas = scene.viewer.canvas;\n    this.camera = scene.camera;\n    // Movement per pixel of movement.\n    this.moveSpeed = options.moveSpeed || 2;\n    // Rotation in radians per pixel of movement.\n    this.rotationSpeed = options.rotationSpeed || (Math.PI / 180);\n    // Zoom factor per scroll.\n    this.zoomFactor = options.zoomFactor || 0.1;\n    this.horizontalAngle = options.horizontalAngle || Math.PI / 2;\n    this.verticalAngle = options.verticalAngle || Math.PI / 4;\n    this.distance = options.distance || 500;\n    this.position = options.position || vec3.create();\n    // What the camera is looking at.\n    this.target = options.target || vec3.create();\n    // The twist angle of the camera, which affects the \"up\" direction.\n    // For example, a twist of 180 degrees, i.e. PI, will flip everything upside down.\n    this.twist = options.twist || 0;\n    // Mouse.\n    this.mouse = { buttons: [false, false, false], x: 0, y: 0, x2: 0, y2: 0 };\n    // Touches.\n    this.touchMode = TOUCH_MODE_INVALID;\n    this.touches = [];\n    this.instance = null;\n    this.onManualChange = options.onManualChange || null;\n    this.fov = options.fov || Math.PI / 4;\n    this.nearClipPlane = options.nearClipPlane || 1;\n    this.farClipPlane = options.farClipPlane || 200000;\n\n    this.update();\n\n    window.addEventListener('resize', (e) => this.onResize());\n    setTimeout(() => this.onResize(), 0);\n\n    // Disable the context menu when right-clicking.\n    this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n\n    this.canvas.addEventListener('selectstart', (e) => e.preventDefault());\n\n    // Track mouse clicks.\n    this.canvas.addEventListener('mousedown', (e) => {\n      e.preventDefault();\n\n      this.mouse.buttons[e.button] = true;\n    });\n\n    // And mouse unclicks.\n    // On the whole document rather than the canvas to stop annoying behavior when moving the mouse out of the canvas.\n    document.addEventListener('mouseup', (e) => {\n      e.preventDefault();\n\n      this.mouse.buttons[e.button] = false;\n    });\n\n    // Handle rotating and moving the camera when the mouse moves.\n    window.addEventListener('mousemove', (e) => {\n      this.mouse.x2 = this.mouse.x;\n      this.mouse.y2 = this.mouse.y;\n      this.mouse.x = e.clientX;\n      this.mouse.y = e.clientY;\n\n      let dx = this.mouse.x - this.mouse.x2;\n      let dy = this.mouse.y - this.mouse.y2;\n\n      if (this.mouse.buttons[0]) {\n        this.rotate(dx, dy);\n      }\n\n      if (this.mouse.buttons[2]) {\n        this.move(-dx, dy);\n      }\n    });\n\n    // Handle zooming when the mouse scrolls.\n    this.canvas.addEventListener('wheel', (e) => {\n      e.preventDefault();\n\n      let deltaY = e.deltaY;\n\n      if (e.deltaMode === 1) {\n        deltaY = deltaY / 3 * 100;\n      }\n\n      this.zoom(deltaY / 100);\n    });\n\n    // Listen to touches.\n    // Supports 1 or 2 touch points.\n    this.canvas.addEventListener('touchstart', (e) => {\n      e.preventDefault();\n\n      let targetTouches = e.targetTouches;\n\n      if (targetTouches.length === 1) {\n        this.touchMode = TOUCH_MODE_ROTATE;\n      } else if (targetTouches.length == 2) {\n        this.touchMode = TOUCH_MODE_ZOOM;\n      } else {\n        this.touchMode = TOUCH_MODE_INVALID;\n      }\n\n      this.touches.length = 0;\n      this.touches.push(...targetTouches);\n    });\n\n    this.canvas.addEventListener('touchend', (e) => {\n      e.preventDefault();\n\n      this.touchMode = TOUCH_MODE_INVALID;\n    });\n\n    this.canvas.addEventListener('touchcancel', (e) => {\n      e.preventDefault();\n\n      this.touchMode = TOUCH_MODE_INVALID;\n    });\n\n    // Rotate or zoom based on the touch mode.\n    this.canvas.addEventListener('touchmove', (e) => {\n      e.preventDefault();\n\n      let targetTouches = e.targetTouches;\n\n      if (this.touchMode === TOUCH_MODE_ROTATE) {\n        let oldTouch = this.touches[0];\n        let newTouch = targetTouches[0];\n        let dx = newTouch.clientX - oldTouch.clientX;\n        let dy = newTouch.clientY - oldTouch.clientY;\n\n        this.rotate(dx, dy);\n      } else if (this.touchMode === TOUCH_MODE_ZOOM) {\n        let len1 = getTouchesLength(this.touches[0], this.touches[1]);\n        let len2 = getTouchesLength(targetTouches[0], targetTouches[1]);\n\n        this.zoom((len1 - len2) / 50);\n      }\n\n      this.touches.length = 0;\n      this.touches.push(...targetTouches);\n    });\n  }\n\n  update() {\n    if (this.instance) {\n      let instance = this.instance;\n      let mdxCamera = instance.model.cameras[0];\n\n      mdxCamera.getTranslation(vecHeap, instance.sequence, instance.frame, instance.counter);\n      vec3.add(vecHeap, vecHeap, mdxCamera.position);\n\n      mdxCamera.getTargetTranslation(vecHeap2, instance.sequence, instance.frame, instance.counter);\n      vec3.add(vecHeap2, vecHeap2, mdxCamera.targetPosition);\n\n      mdxCamera.getRotation(twistHeap, instance.sequence, instance.frame, instance.counter);\n      this.twist = twistHeap[0];\n\n      // Change to world space in case the instance was moved in any way.\n      // I am not sure how well this will handle scales, twists, and other things.\n      vec3.transformMat4(vecHeap, vecHeap, instance.worldMatrix);\n      vec3.transformMat4(vecHeap2, vecHeap2, instance.worldMatrix);\n\n      this.moveToAndFace(vecHeap, vecHeap2);\n    } else {\n      this.updateInternalCamera();\n    }\n  }\n\n  // Move the camera and the target on the XY plane.\n  move(x, y) {\n    let dirX = this.camera.directionX;\n    let dirY = this.camera.directionY;\n    let w = this.canvas.width;\n    let h = this.canvas.height;\n    let aspect = w / h;\n\n    let sw = (x / w) * this.distance * aspect;\n    let sh = (y / h) * this.distance;\n\n    vec3.add(this.target, this.target, vec3.scale(vecHeap, vec3.normalize(vecHeap, vec3.set(vecHeap, dirX[0], dirX[1], 0)), sw));\n    vec3.add(this.target, this.target, vec3.scale(vecHeap, vec3.normalize(vecHeap, vec3.set(vecHeap, dirY[0], dirY[1], 0)), sh));\n\n    this.manualChange();\n  }\n\n  // Rotate the camera around the target.\n  rotate(x, y) {\n    this.horizontalAngle -= x * this.rotationSpeed;\n    this.verticalAngle -= y * this.rotationSpeed;\n\n    this.manualChange();\n  }\n\n  // Zoom the camera by changing the distance from the target.\n  zoom(factor) {\n    this.distance = Math.max(1, this.distance * (1 + factor * this.zoomFactor));\n\n    this.manualChange();\n  }\n\n  manualChange() {\n    this.updateInternalCamera();\n\n    if (this.instance) {\n      this.instance = null;\n\n      if (this.onManualChange) {\n        this.onManualChange();\n      }\n    }\n  }\n\n  // Resize the canvas automatically and update the camera.\n  onResize() {\n    let width = Math.max(this.canvas.clientWidth, 1);\n    let height = Math.max(this.canvas.clientHeight, 1);\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.scene.viewport[2] = width;\n    this.scene.viewport[3] = height;\n\n    this.camera.perspective(this.fov, width / height, this.nearClipPlane, this.farClipPlane);\n  }\n\n  moveToAndFace(position, target) {\n    vec3.sub(vecHeap, position, target);\n\n    let r = vec3.length(vecHeap);\n    let theta = Math.atan2(vecHeap[1], vecHeap[0]);\n    let phi = Math.acos(vecHeap[2] / r);\n\n    vec3.copy(this.target, target);\n\n    this.verticalAngle = phi;\n    this.horizontalAngle = theta + Math.PI / 2;\n    this.distance = r;\n\n    this.updateInternalCamera();\n  }\n\n  updateInternalCamera() {\n    // Limit the vertical angle so it doesn't flip.\n    // Since the camera uses a quaternion, flips don't matter to it, but this feels better.\n    this.verticalAngle = Math.min(Math.max(0.01, this.verticalAngle), Math.PI - 0.01);\n\n    quat.identity(quatHeap);\n    quat.rotateZ(quatHeap, quatHeap, this.horizontalAngle);\n    quat.rotateX(quatHeap, quatHeap, this.verticalAngle);\n\n    vec3.set(this.position, 0, 0, 1);\n    vec3.transformQuat(this.position, this.position, quatHeap);\n    vec3.scale(this.position, this.position, this.distance);\n    vec3.add(this.position, this.position, this.target);\n\n    let twist = this.twist - Math.PI / 2;\n    vec3.set(vecHeap, 0, -Math.cos(twist), -Math.sin(twist));\n\n    this.camera.moveToAndFace(this.position, this.target, vecHeap);\n  }\n\n  applyInstanceCamera(instance) {\n    this.instance = instance;\n    this.fov = instance.model.cameras[0].fieldOfView;\n\n    this.onResize();\n\n    this.update();\n  }\n}\n","const decoder = new TextDecoder();\nconst encoder = new TextEncoder();\n\n/**\n * Decode bytes as a UTF8 string.\n */\nexport function decodeUtf8(buffer: ArrayBuffer | Uint8Array): string {\n  return decoder.decode(buffer);\n}\n\n/**\n * Encode a UTF8 string to bytes.\n */\nexport function encodeUtf8(utf8: string): Uint8Array {\n  return encoder.encode(utf8);\n}\n\n/**\n * Get the byte length of a UTF8 string.\n * \n * @see https://stackoverflow.com/a/23329386\n */\nexport function byteLengthUtf8(str: string): number {\n  // returns the byte length of an utf8 string\n  let s = str.length;\n  for (let i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i);\n    if (code > 0x7f && code <= 0x7ff) s++;\n    else if (code > 0x7ff && code <= 0xffff) s += 2;\n    if (code >= 0xDC00 && code <= 0xDFFF) i--; //trail surrogate\n  }\n  return s;\n}\n\n/**\n * Splits the given string into an array of strings.\n * \n * Each string will have a byte length smaller or equal to chunkBytelength when encoded as UTF8.\n * \n * @see https://stackoverflow.com/a/18729931\n */\nexport function splitUtf8ByteLength(str: string, chunkBytelength: number): string[] {\n  const chunks = [];\n  let pos = 0;\n  let bytes = 0;\n\n  for (let i = 0, l = str.length; i < l; i++) {\n    const code = str.charCodeAt(i);\n\n    if (code < 0x80) {\n      bytes += 1;\n    } else if (code < 0x800) {\n      bytes += 2;\n    } else if (code < 0xd800 || code >= 0xe000) {\n      bytes += 3;\n    } else {\n      i++;\n      bytes += 4;\n    }\n\n    if (bytes >= chunkBytelength - 3) {\n      chunks.push(str.substr(pos, i));\n\n      pos += i;\n      bytes = 0;\n    }\n  }\n\n  if (bytes > 0) {\n    chunks.push(str.substr(pos));\n  }\n\n  return chunks;\n}\n","const buffer = new ArrayBuffer(8);\nconst int8 = new Int8Array(buffer);\nconst int16 = new Int16Array(buffer);\nconst int32 = new Int32Array(buffer);\nconst uint8 = new Uint8Array(buffer);\nconst uint16 = new Uint16Array(buffer);\nconst uint32 = new Uint32Array(buffer);\nconst float32 = new Float32Array(buffer);\nconst float64 = new Float64Array(buffer);\n\n/**\n * Typecast a 8 bit unsigned integer to a 8 bits signed integer.\n */\nexport function uint8ToInt8(a: number): number {\n  uint8[0] = a;\n\n  return int8[0];\n}\n\n/**\n * Typecast two 8 bit unsigned integers to a 16 bits signed integer.\n */\nexport function uint8ToInt16(a: number, b: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n\n  return int16[0];\n}\n\n/**\n * Typecast three 8 bit unsigned integers to a 24 bits signed integer.\n */\nexport function uint8ToInt24(a: number, b: number, c: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = 0;\n\n  return int32[0];\n}\n\n/**\n * Typecast four 8 bit unsigned integers to a 32 bits signed integer.\n */\nexport function uint8ToInt32(a: number, b: number, c: number, d: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = d;\n\n  return int32[0];\n}\n\n/**\n * Typecast two 8 bit unsigned integers to a 16 bits unsigned integer.\n */\nexport function uint8ToUint16(a: number, b: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n\n  return uint16[0];\n}\n\n/**\n * Typecast three 8 bit unsigned integers to a 24 bits unsigned integer.\n */\nexport function uint8ToUint24(a: number, b: number, c: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = 0;\n\n  return uint32[0];\n}\n\n/**\n * Typecast four 8 bit unsigned integers to a 32 bits unsigned integer.\n */\nexport function uint8ToUint32(a: number, b: number, c: number, d: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = d;\n\n  return uint32[0];\n}\n\n/**\n * Typecast four 8 bit unsigned integers to a 32 bits IEEE float.\n */\nexport function uint8ToFloat32(a: number, b: number, c: number, d: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = d;\n\n  return float32[0];\n}\n\n/**\n * Typecast eight 8 bit unsigned integers to a 64 bits IEEE float.\n */\nexport function uint8ToFloat64(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number {\n  uint8[0] = a;\n  uint8[1] = b;\n  uint8[2] = c;\n  uint8[3] = d;\n  uint8[4] = e;\n  uint8[5] = f;\n  uint8[6] = g;\n  uint8[7] = h;\n\n  return float64[0];\n}\n\n/**\n * Typecast a 8 bit signed integer to a 8 bit unsigned integer.\n */\nexport function int8ToUint8(a: number): number {\n  uint8[0] = a;\n\n  return int8[0];\n}\n\n/**\n * Typecast a 16 bit signed integer to two 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function int16ToUint8(out: Uint8Array, a: number): Uint8Array {\n  int16[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n\n  return out;\n}\n\n/**\n * Typecast a 24 bit signed integer to three 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function int24ToUint8(out: Uint8Array, a: number): Uint8Array {\n  int32[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n\n  return out;\n}\n\n/**\n * Typecast a 32 bit signed integer to four 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function int32ToUint8(out: Uint8Array, a: number): Uint8Array {\n  int32[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n  out[3] = uint8[3];\n\n  return out;\n}\n\n/**\n * Typecast a 16 bit unsigned integer to two 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function uint16ToUint8(out: Uint8Array, a: number): Uint8Array {\n  uint16[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n\n  return out;\n}\n\n/**\n * Typecast a 24 bit unsigned integer to three 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function uint24ToUint8(out: Uint8Array, a: number): Uint8Array {\n  uint32[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n\n  return out;\n}\n\n/**\n * Typecast a 32 bit unsigned integer to four 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function uint32ToUint8(out: Uint8Array, a: number): Uint8Array {\n  uint32[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n  out[3] = uint8[3];\n\n  return out;\n}\n\n/**\n * Typecast a 32 bit IEEE float to four 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function float32ToUint8(out: Uint8Array, a: number): Uint8Array {\n  float32[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n  out[3] = uint8[3];\n\n  return out;\n}\n\n/**\n * Typecast a 64 bit IEEE float to eight 8 bit unsigned integers.\n * \n * The result is stored in out.\n */\nexport function float64ToUint8(out: Uint8Array, a: number): Uint8Array {\n  float64[0] = a;\n\n  out[0] = uint8[0];\n  out[1] = uint8[1];\n  out[2] = uint8[2];\n  out[3] = uint8[3];\n  out[4] = uint8[4];\n  out[5] = uint8[5];\n  out[6] = uint8[6];\n  out[7] = uint8[7];\n\n  return out;\n}\n\n/**\n * Typecast a normal JavaScript number to a 32 bits unsigned integer.\n */\nexport function numberToUint32(number: number): number {\n  uint32[0] = number;\n\n  return uint32[0];\n}\n\n/**\n * Interperts a string as a base 256 number.\n */\nexport function stringToBase256(string: string): number {\n  let number = 0;\n\n  for (const c of string) {\n    number = number * 256 + c.charCodeAt(0);\n  }\n\n  return number;\n}\n\n/**\n * Interperts a number as a base 256 string.\n */\nexport function base256ToString(number: number): string {\n  const array = [];\n\n  while (number > 0) {\n    array.push(String.fromCharCode(number % 256));\n    number = Math.floor(number / 256);\n  }\n\n  return array.reverse().join('');\n}\n","import { bytesOf } from './bytesof';\nimport { boundIndexOf } from './searches';\nimport { uint8ToInt8, uint8ToInt16, uint8ToInt32, uint8ToUint16, uint8ToUint32, uint8ToFloat32, uint8ToFloat64, int8ToUint8, int16ToUint8, int32ToUint8, uint16ToUint8, uint32ToUint8, float32ToUint8, float64ToUint8 } from './typecast';\nimport { decodeUtf8, encodeUtf8 } from './utf8';\n\n// Memory for all of the xxxToUint type casts.\nconst uint8 = new Uint8Array(8);\n\n/**\n * A binary stream.\n */\nexport default class BinaryStream {\n  buffer: ArrayBuffer;\n  uint8array: Uint8Array;\n  index = 0;\n  byteLength: number;\n  remaining: number;\n\n  constructor(buffer: ArrayBuffer | Uint8Array, byteOffset?: number, byteLength?: number) {\n    const bytes = bytesOf(buffer);\n\n    // For browsers not supporting the spec.\n    // Once upon a time I reported this issue on the Firefox tracker.\n    // Seems like Safari needs an issue report too.\n    byteOffset = byteOffset || 0;\n    byteLength = byteLength || bytes.length;\n\n    this.buffer = buffer;\n    this.uint8array = bytes.subarray(byteOffset, byteOffset + byteLength);\n    this.byteLength = byteLength;\n    this.remaining = byteLength;\n  }\n\n  /**\n   * Create a subreader of this reader, at its position, with the given byte length.\n   */\n  substream(byteLength: number): BinaryStream {\n    if (this.remaining < byteLength) {\n      throw new Error(`ByteStream: substream: want ${byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n\n    this.index += byteLength;\n\n    return new BinaryStream(this.uint8array.subarray(index, index + byteLength));\n  }\n\n  /**\n   * Skip a number of bytes.\n   */\n  skip(bytes: number): void {\n    if (this.remaining < bytes) {\n      throw new Error(`ByteStream: skip: premature end - want ${bytes} bytes but have ${this.remaining}`);\n    }\n\n    this.index += bytes;\n    this.remaining -= bytes;\n  }\n\n  /**\n   * Set the reader's index.\n   */\n  seek(index: number): void {\n    this.index = index;\n    this.remaining = this.byteLength - index;\n  }\n\n  /**\n   * Read a UTF8 string with the given number of bytes.\n   * \n   * The entire size will be read, however the string returned is NULL terminated in its memory block.\n   * \n   * For example, the MDX format has many strings that have a constant maximum size, where any bytes after the string are NULLs.\n   * Such strings will be loaded correctly given the maximum size.\n   */\n  read(bytes: number): string {\n    if (this.remaining < bytes) {\n      throw new Error(`ByteStream: read: premature end - want ${bytes} bytes but have ${this.remaining}`);\n    }\n\n    const uint8array = this.uint8array;\n    const start = this.index;\n    let end = boundIndexOf(uint8array, 0, start, bytes);\n\n    if (end === -1) {\n      end = start + bytes;\n    }\n\n    this.index += bytes;\n    this.remaining -= bytes;\n\n    return decodeUtf8(uint8array.subarray(start, end));\n  }\n\n  /**\n   * Read a UTF8 NULL terminated string.\n   */\n  readNull(): string {\n    if (this.remaining < 1) {\n      throw new Error(`ByteStream: readNull: premature end - want at least 1 byte but have 0`);\n    }\n\n    const uint8array = this.uint8array;\n    const start = this.index;\n    let end = uint8array.indexOf(0, start);\n\n    if (end === -1) {\n      end = uint8array.length - 1;\n    }\n\n    const bytes = end - start + 1;\n\n    this.index += bytes;\n    this.remaining -= bytes;\n\n    return decodeUtf8(uint8array.subarray(start, end));\n  }\n\n  /**\n   * Read a binary string with the given number of bytes.\n   */\n  readBinary(bytes: number): string {\n    if (this.remaining < bytes) {\n      throw new Error(`ByteStream: readBinary: premature end - want ${bytes} bytes but have ${this.remaining}`);\n    }\n\n    const uint8array = this.uint8array;\n    const index = this.index;\n    let data = '';\n\n    for (let i = 0; i < bytes; i++) {\n      data += String.fromCharCode(uint8array[index + i]);\n    }\n\n    this.index += bytes;\n    this.remaining -= bytes;\n\n    return data;\n  }\n\n  /**\n   * Read a 8 bit signed integer.\n   */\n  readInt8(): number {\n    if (this.remaining < 1) {\n      throw new Error(`ByteStream: readInt8: premature end - want 1 byte but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToInt8(uint8array[index]);\n\n    this.index += 1;\n    this.remaining -= 1;\n\n    return data;\n  }\n\n  /**\n   * Read a 16 bit signed integer.\n   */\n  readInt16(): number {\n    if (this.remaining < 2) {\n      throw new Error(`ByteStream: readInt16: premature end - want 2 bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToInt16(uint8array[index], uint8array[index + 1]);\n\n    this.index += 2;\n    this.remaining -= 2;\n\n    return data;\n  }\n\n  /**\n   * Read a 32 bit signed integer.\n   */\n  readInt32(): number {\n    if (this.remaining < 4) {\n      throw new Error(`ByteStream: readInt32: premature end - want 4 bytes but have ${this.remaining}`);\n    }\n\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToInt32(uint8array[index], uint8array[index + 1], uint8array[index + 2], uint8array[index + 3]);\n\n    this.index += 4;\n    this.remaining -= 4;\n\n    return data;\n  }\n\n  /**\n   * Read a 8 bit unsigned integer.\n   */\n  readUint8(): number {\n    if (this.remaining < 1) {\n      throw new Error(`ByteStream: readUint8: premature end - want 1 byte but have ${this.remaining}`);\n    }\n\n    const data = this.uint8array[this.index];\n\n    this.index += 1;\n    this.remaining -= 1;\n\n    return data;\n  }\n\n  /**\n   * Read a 16 bit unsigned integer.\n   */\n  readUint16(): number {\n    if (this.remaining < 2) {\n      throw new Error(`ByteStream: readUint16: premature end - want 2 bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToUint16(uint8array[index], uint8array[index + 1]);\n\n    this.index += 2;\n    this.remaining -= 2;\n\n    return data;\n  }\n\n  /**\n   * Read a 32 bit unsigned integer.\n   */\n  readUint32(): number {\n    if (this.remaining < 4) {\n      throw new Error(`ByteStream: readUint32: premature end - want 4 bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToUint32(uint8array[index], uint8array[index + 1], uint8array[index + 2], uint8array[index + 3]);\n\n    this.index += 4;\n    this.remaining -= 4;\n\n    return data;\n  }\n\n  /**\n   * Read a 32 bit float.\n   */\n  readFloat32(): number {\n    if (this.remaining < 4) {\n      throw new Error(`ByteStream: readFloat32: premature end - want 4 bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToFloat32(uint8array[index], uint8array[index + 1], uint8array[index + 2], uint8array[index + 3]);\n\n    this.index += 4;\n    this.remaining -= 4;\n\n    return data;\n  }\n\n  /**\n   * Read a 64 bit float.\n   */\n  readFloat64(): number {\n    if (this.remaining < 8) {\n      throw new Error(`ByteStream: readFloat64: premature end - want 8 bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const data = uint8ToFloat64(uint8array[index], uint8array[index + 1], uint8array[index + 2], uint8array[index + 3], uint8array[index + 4], uint8array[index + 5], uint8array[index + 6], uint8array[index + 7]);\n\n    this.index += 8;\n    this.remaining -= 8;\n\n    return data;\n  }\n\n  /**\n   * Read an array of 8 bit signed integers.\n   */\n  readInt8Array(view: number | Int8Array): Int8Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Int8Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readInt8Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      view[i] = uint8ToInt8(uint8array[index + i]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 16 bit signed integers.\n   */\n  readInt16Array(view: number | Int16Array): Int16Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Int16Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readInt16Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 2;\n\n      view[i] = uint8ToInt16(uint8array[offset], uint8array[offset + 1]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 32 bit signed integers.\n   */\n  readInt32Array(view: number | Int32Array): Int32Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Int32Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readInt32Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      view[i] = uint8ToInt32(uint8array[offset], uint8array[offset + 1], uint8array[offset + 2], uint8array[offset + 3]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 8 bit unsigned integers.\n   */\n  readUint8Array(view: number | Uint8Array): Uint8Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Uint8Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readUint8Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      view[i] = uint8array[index + i];\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 16 bit unsigned integers.\n   */\n  readUint16Array(view: number | Uint16Array): Uint16Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Uint16Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readUint16Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 2;\n\n      view[i] = uint8ToUint16(uint8array[offset], uint8array[offset + 1]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 32 bit unsigned integers.\n   */\n  readUint32Array(view: number | Uint32Array): Uint32Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Uint32Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readUint32Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      view[i] = uint8ToUint32(uint8array[offset], uint8array[offset + 1], uint8array[offset + 2], uint8array[offset + 3]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 32 bit floats.\n   */\n  readFloat32Array(view: number | Float32Array): Float32Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Float32Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readFloat32Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      view[i] = uint8ToFloat32(uint8array[offset], uint8array[offset + 1], uint8array[offset + 2], uint8array[offset + 3]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Read an array of 64 bit floats.\n   */\n  readFloat64Array(view: number | Float64Array): Float64Array {\n    if (!ArrayBuffer.isView(view)) {\n      view = new Float64Array(view);\n    }\n\n    if (this.remaining < view.byteLength) {\n      throw new Error(`ByteStream: readFloat64Array: premature end - want ${view.byteLength} bytes but have ${this.remaining}`);\n    }\n\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 8;\n\n      view[i] = uint8ToFloat64(uint8array[offset], uint8array[offset + 1], uint8array[offset + 2], uint8array[offset + 3], uint8array[offset + 4], uint8array[offset + 5], uint8array[offset + 6], uint8array[offset + 7]);\n    }\n\n    this.index += view.byteLength;\n    this.remaining -= view.byteLength;\n\n    return view;\n  }\n\n  /**\n   * Write a UTF8 string.\n   * \n   * Returns the number of bytes that were written,\n   */\n  write(utf8: string): number {\n    const bytes = encodeUtf8(utf8);\n\n    this.writeUint8Array(bytes);\n\n    return bytes.length;\n  }\n\n  /**\n   * Write a UTF8 string as a NULL terminated string.\n   * \n   * Returns the number of bytes that were written, including the terminating NULL.\n   */\n  writeNull(utf8: string): number {\n    const bytes = this.write(utf8);\n\n    this.index++;\n    this.remaining--;\n\n    return bytes + 1;\n  }\n\n  /**\n   * Write a binary string.\n   */\n  writeBinary(value: string): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n    const count = value.length;\n\n    for (let i = 0; i < count; i++) {\n      uint8array[index + i] = value.charCodeAt(i);\n    }\n\n    this.index += count;\n  }\n\n  /**\n   * Write a 8 bit signed integer.\n   */\n  writeInt8(value: number): void {\n    this.uint8array[this.index] = int8ToUint8(value);\n    this.index += 1;\n  }\n\n  /**\n   * Write a 16 bit signed integer.\n   */\n  writeInt16(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    int16ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n\n    this.index += 2;\n  }\n\n  /**\n   * Write a 32 bit signed integer.\n   */\n  writeInt32(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    int32ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n    uint8array[index + 2] = uint8[2];\n    uint8array[index + 3] = uint8[3];\n\n    this.index += 4;\n  }\n\n  /**\n   * Write a 8 bit unsigned integer.\n   */\n  writeUint8(value: number): void {\n    this.uint8array[this.index] = value;\n    this.index += 1;\n  }\n\n  /**\n   * Write a 16 bit unsigned integer.\n   */\n  writeUint16(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    uint16ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n\n    this.index += 2;\n  }\n\n  /**\n   * Write a 32 bit unsigned integer.\n   */\n  writeUint32(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    uint32ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n    uint8array[index + 2] = uint8[2];\n    uint8array[index + 3] = uint8[3];\n\n    this.index += 4;\n  }\n\n  /**\n   * Write a 32 bit float.\n   */\n  writeFloat32(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    float32ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n    uint8array[index + 2] = uint8[2];\n    uint8array[index + 3] = uint8[3];\n\n    this.index += 4;\n  }\n\n  /**\n   * Write a 64 bit float.\n   */\n  writeFloat64(value: number): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    float64ToUint8(uint8, value);\n\n    uint8array[index] = uint8[0];\n    uint8array[index + 1] = uint8[1];\n    uint8array[index + 2] = uint8[2];\n    uint8array[index + 3] = uint8[3];\n    uint8array[index + 4] = uint8[4];\n    uint8array[index + 5] = uint8[5];\n    uint8array[index + 6] = uint8[6];\n    uint8array[index + 7] = uint8[7];\n\n    this.index += 8;\n  }\n\n  /**\n   * Write an array of 8 bit signed integers.\n   */\n  writeInt8Array(view: Int8Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      uint8array[index + i] = int8ToUint8(view[i]);\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 16 bit signed integers.\n   */\n  writeInt16Array(view: Int16Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 2;\n\n      int16ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 32 bit signed integers.\n   */\n  writeInt32Array(view: Int32Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      int32ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n      uint8array[offset + 2] = uint8[2];\n      uint8array[offset + 3] = uint8[3];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 8 bit unsigned integers.\n   */\n  writeUint8Array(view: Uint8Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      uint8array[index + i] = view[i];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 16 bit unsigned integers.\n   */\n  writeUint16Array(view: Uint16Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 2;\n\n      uint16ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 32 bit unsigned integers.\n   */\n  writeUint32Array(view: Uint32Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      uint32ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n      uint8array[offset + 2] = uint8[2];\n      uint8array[offset + 3] = uint8[3];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 32 bit floats.\n   */\n  writeFloat32Array(view: Float32Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 4;\n\n      float32ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n      uint8array[offset + 2] = uint8[2];\n      uint8array[offset + 3] = uint8[3];\n    }\n\n    this.index += view.byteLength;\n  }\n\n  /**\n   * Write an array of 64 bit floats.\n   */\n  writeFloat64Array(view: Float64Array): void {\n    const index = this.index;\n    const uint8array = this.uint8array;\n\n    for (let i = 0, l = view.length; i < l; i++) {\n      const offset = index + i * 8;\n\n      float64ToUint8(uint8, view[i]);\n\n      uint8array[offset] = uint8[0];\n      uint8array[offset + 1] = uint8[1];\n      uint8array[offset + 2] = uint8[2];\n      uint8array[offset + 3] = uint8[3];\n      uint8array[offset + 4] = uint8[4];\n      uint8array[offset + 5] = uint8[5];\n      uint8array[offset + 6] = uint8[6];\n      uint8array[offset + 7] = uint8[7];\n    }\n\n    this.index += view.byteLength;\n  }\n}\n","import { encodeUtf8 } from './utf8';\n\n/**\n * Return the given buffer as a Uint8Array.\n * \n * Strings are encoded as UTF8.\n */\nexport function bytesOf(buffer: ArrayBuffer | Uint8Array | string | number[]): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (typeof buffer === 'string') {\n    return encodeUtf8(buffer);\n  } else {\n    return new Uint8Array(buffer);\n  }\n}\n","export function isStringInBytes(buffer: Uint8Array, target: string, offset = 0, length = Infinity): boolean {\n  const start = Math.max(offset, 0);\n  const end = Math.min(start + length, buffer.length);\n  let whichByte = 0;\n  let targetByte = target.charCodeAt(0);\n\n  for (let i = start; i < end; i++) {\n    const byte = buffer[i];\n\n    if (byte === targetByte) {\n      whichByte += 1;\n\n      if (whichByte === target.length) {\n        return true;\n      }\n\n      targetByte = target.charCodeAt(whichByte);\n    } else if (whichByte > 0) {\n      whichByte = 0;\n      targetByte = target.charCodeAt(0);\n    }\n  }\n\n  return false;\n}\n\nexport function isStringInString(buffer: string, target: string, offset = 0, length = Infinity): boolean {\n  const start = Math.max(offset, 0);\n  const end = Math.min(start + length, buffer.length);\n  let whichByte = 0;\n  let targetByte = target[0];\n\n  for (let i = start; i < end; i++) {\n    const byte = buffer[i];\n\n    if (byte === targetByte) {\n      whichByte += 1;\n\n      if (whichByte === target.length) {\n        return true;\n      }\n\n      targetByte = target[whichByte];\n    } else if (whichByte > 0) {\n      whichByte = 0;\n      targetByte = target[0];\n    }\n  }\n\n  return false;\n}\n\nexport function boundIndexOf(buffer: Uint8Array, target: number, offset = 0, length = Infinity): number {\n  const start = Math.max(offset, 0);\n  const end = Math.min(start + length, buffer.length);\n\n  for (let i = start; i < end; i++) {\n    if (buffer[i] === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","import BinaryStream from '../../common/binarystream';\r\n\r\n/**\r\n * A tile corner.\r\n */\r\nexport default class Corner {\r\n  groundHeight = 0;\r\n  waterHeight = 0;\r\n  mapEdge = 0;\r\n  ramp = 0;\r\n  // 地面是否枯萎\r\n  blight = 0;\r\n  water = 0;\r\n  boundary = 0;\r\n  groundTexture = 0;\r\n  cliffVariation = 0;\r\n  groundVariation = 0;\r\n  cliffTexture = 0;\r\n  layerHeight = 0;\r\n\r\n  load(stream: BinaryStream): void {\r\n    this.groundHeight = (stream.readInt16() - 8192) / 512;\r\n\r\n    const waterAndEdge = stream.readInt16();\r\n\r\n    this.waterHeight = ((waterAndEdge & 0x3FFF) - 8192) / 512;\r\n    this.mapEdge = waterAndEdge & 0x4000;\r\n\r\n    const textureAndFlags = stream.readUint8();\r\n\r\n    this.ramp = textureAndFlags & 0b00010000;\r\n    this.blight = textureAndFlags & 0b00100000;\r\n    this.water = textureAndFlags & 0b01000000;\r\n    this.boundary = textureAndFlags & 0b10000000;\r\n\r\n    this.groundTexture = textureAndFlags & 0b00001111;\r\n\r\n    const variation = stream.readUint8();\r\n\r\n    this.cliffVariation = (variation & 0b11100000) >>> 5;\r\n    this.groundVariation = variation & 0b00011111;\r\n\r\n    const cliffTextureAndLayer = stream.readUint8();\r\n\r\n    this.cliffTexture = (cliffTextureAndLayer & 0b11110000) >>> 4;\r\n    this.layerHeight = cliffTextureAndLayer & 0b00001111;\r\n  }\r\n\r\n  save(stream: BinaryStream): void {\r\n    stream.writeInt16(this.groundHeight * 512 + 8192);\r\n    stream.writeInt16(this.waterHeight * 512 + 8192 + this.mapEdge << 14);\r\n    stream.writeUint8((this.ramp << 4) | (this.blight << 5) | (this.water << 6) | (this.boundary << 7) | this.groundTexture);\r\n    stream.writeUint8((this.cliffVariation << 5) | this.groundVariation);\r\n    stream.writeUint8((this.cliffTexture << 4) + this.layerHeight);\r\n  }\r\n}\r\n","import BinaryStream from '../../common/binarystream';\r\nimport Corner from './corner';\r\n\r\n/**\r\n * war3map.w3e - the environment file.\r\n */\r\nexport default class War3MapW3e {\r\n  version = 0;\r\n  tileset = 'A';\r\n  haveCustomTileset = 0;\r\n  /**\r\n   * 地面贴图组\r\n   */\r\n  groundTilesets: string[] = [];\r\n  /**\r\n   * 悬崖贴图\r\n   */\r\n  cliffTilesets: string[] = [];\r\n  mapSize = new Int32Array(2);\r\n  centerOffset = new Float32Array(2);\r\n  corners: Corner[][] = [];\r\n\r\n  load(buffer: ArrayBuffer | Uint8Array): void {\r\n    const stream = new BinaryStream(buffer);\r\n\r\n    if (stream.readBinary(4) !== 'W3E!') {\r\n      return;\r\n    }\r\n\r\n    this.version = stream.readInt32();\r\n    this.tileset = stream.readBinary(1);\r\n    this.haveCustomTileset = stream.readInt32();\r\n\r\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\r\n      this.groundTilesets[i] = stream.readBinary(4);\r\n    }\r\n\r\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\r\n      this.cliffTilesets[i] = stream.readBinary(4);\r\n    }\r\n\r\n    stream.readInt32Array(this.mapSize);\r\n    stream.readFloat32Array(this.centerOffset);\r\n\r\n    for (let row = 0, rows = this.mapSize[1]; row < rows; row++) {\r\n      this.corners[row] = [];\r\n\r\n      for (let column = 0, columns = this.mapSize[0]; column < columns; column++) {\r\n        const corner = new Corner();\r\n\r\n        corner.load(stream);\r\n\r\n        this.corners[row][column] = corner;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  save(): Uint8Array {\r\n    const stream = new BinaryStream(new ArrayBuffer(this.getByteLength()));\r\n\r\n    stream.writeBinary('W3E!');\r\n    stream.writeInt32(this.version);\r\n    stream.writeBinary(this.tileset);\r\n    stream.writeInt32(this.haveCustomTileset);\r\n    stream.writeUint32(this.groundTilesets.length);\r\n\r\n    for (const groundTileset of this.groundTilesets) {\r\n      stream.writeBinary(groundTileset);\r\n    }\r\n\r\n    stream.writeUint32(this.cliffTilesets.length);\r\n\r\n    for (const cliffTileset of this.cliffTilesets) {\r\n      stream.writeBinary(cliffTileset);\r\n    }\r\n\r\n    stream.writeInt32Array(this.mapSize);\r\n    stream.writeFloat32Array(this.centerOffset);\r\n\r\n    for (const row of this.corners) {\r\n      for (const corner of row) {\r\n        corner.save(stream);\r\n      }\r\n    }\r\n\r\n    return stream.uint8array;\r\n  }\r\n\r\n  getByteLength(): number {\r\n    return 37 + (this.groundTilesets.length * 4) + (this.cliffTilesets.length * 4) + (this.mapSize[0] * this.mapSize[1] * 7);\r\n  }\r\n\r\n  /**\r\n   * Is the tile at the given column and row water?\r\n   */\r\n  isWater(column: number, row: number): number {\r\n    const corners = this.corners;\r\n\r\n    return corners[row][column].water || corners[row][column + 1].water || corners[row + 1][column].water || corners[row + 1][column + 1].water;\r\n  }\r\n\r\n  /**\r\n   * Is the corner at the given column and row a cliff?\r\n   */\r\n  isCliff(column: number, row: number): boolean {\r\n    const [columns, rows] = this.mapSize;\r\n    if (column < 1 || column > columns - 2 || row < 1 || row > rows - 2) {\r\n      return false;\r\n    }\r\n\r\n    const corners = this.corners;\r\n    const bottomLeft = corners[row][column].layerHeight;\r\n    const bottomRight = corners[row][column + 1].layerHeight;\r\n    const topLeft = corners[row + 1][column].layerHeight;\r\n    const topRight = corners[row + 1][column + 1].layerHeight;\r\n\r\n    return bottomLeft !== bottomRight || bottomLeft !== topLeft || bottomLeft !== topRight;\r\n  }\r\n\r\n  /**\r\n   * Get the ground texture of a corner, whether it's normal ground, a cliff, or a blighted corner.\r\n   */\r\n  cornerTexture(column: number, row: number, tilesets: any[], cliffTilesets: any[]): number {\r\n    const corners = this.corners;\r\n    const columns = this.mapSize[0] - 1;\r\n    const rows = this.mapSize[1] - 1;\r\n\r\n    for (let y = -1; y < 1; y++) {\r\n      for (let x = -1; x < 1; x++) {\r\n        if (column + x > 0 && column + x < columns - 1 && row + y > 0 && row + y < rows - 1) {\r\n          if (this.isCliff(column + x, row + y)) {\r\n            let texture = corners[row + y][column + x].cliffTexture;\r\n\r\n            if (texture === 15) {\r\n              texture = 1;\r\n            }\r\n\r\n            return this.cliffGroundIndex(texture, tilesets, cliffTilesets);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const corner = corners[row][column];\r\n\r\n    // Is this corner blighted?\r\n    // if (corner.blight) {\r\n    //   return this.blightTextureIndex;\r\n    // }\r\n\r\n    return corner.groundTexture;\r\n  }\r\n\r\n  /**\r\n   * Given a cliff index, get its ground texture index.\r\n   * This is an index into the tilset textures.\r\n   */\r\n  cliffGroundIndex(whichCliff: number, tilesets: any[], cliffTilesets: any[]): number {\r\n    const whichTileset = cliffTilesets[whichCliff].string('groundTile');\r\n\r\n    for (let i = 0, l = tilesets.length; i < l; i++) {\r\n      if (tilesets[i].string('tileID') === whichTileset) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n}\r\n","/**\r\n * A SLK table file.\r\n */\r\nexport default class SlkFile {\r\n    rows: string[][] = [];\r\n\r\n    load(buffer: string): void {\r\n        if (!buffer.startsWith('ID')) {\r\n            throw new Error('WrongMagicNumber');\r\n        }\r\n\r\n        const rows = this.rows;\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        for (const line of buffer.split('\\n')) {\r\n            // The B command is supposed to define the total number of columns and rows, however in UbetSplatData.slk it gives wrong information\r\n            // Therefore, just ignore it, since JavaScript arrays grow as they want either way\r\n            if (line[0] !== 'B') {\r\n                for (const token of line.split(';')) {\r\n                    const op = token[0];\r\n                    const valueString = token.substring(1).trim();\r\n                    let value;\r\n\r\n                    if (op === 'X') {\r\n                        x = parseInt(valueString, 10) - 1;\r\n                    } else if (op === 'Y') {\r\n                        y = parseInt(valueString, 10) - 1;\r\n                    } else if (op === 'K') {\r\n                        if (!rows[y]) {\r\n                            rows[y] = [];\r\n                        }\r\n\r\n                        if (valueString[0] === '\"') {\r\n                            value = valueString.slice(1, -1);\r\n                        } else {\r\n                            value = valueString;\r\n                        }\r\n\r\n                        rows[y][x] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    save(): string {\r\n        const rows = this.rows;\r\n        const rowCount = rows.length;\r\n        const lines = [];\r\n        let biggestColumn = 0;\r\n\r\n        for (let y = 0; y < rowCount; y++) {\r\n            const row = rows[y];\r\n            const columnCount = row.length;\r\n\r\n            if (columnCount > biggestColumn) {\r\n                biggestColumn = columnCount;\r\n            }\r\n\r\n            let firstOfRow = true;\r\n\r\n            for (let x = 0; x < columnCount; x++) {\r\n                const value = row[x];\r\n\r\n                if (value !== undefined) {\r\n                    let encoded;\r\n\r\n                    if (typeof value === 'string') {\r\n                        encoded = `\"${value}\"`;\r\n                    } else if (typeof value === 'boolean') {\r\n                        if (value) {\r\n                            encoded = 'TRUE';\r\n                        } else {\r\n                            encoded = 'FALSE';\r\n                        }\r\n                    } else {\r\n                        encoded = `${value}`;\r\n                    }\r\n\r\n                    if (firstOfRow) {\r\n                        firstOfRow = false;\r\n\r\n                        lines.push(`C;X${x + 1};Y${y + 1};K${encoded}`);\r\n                    } else {\r\n                        lines.push(`C;X${x + 1};K${encoded}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return `ID;P\\r\\nB;X${biggestColumn};Y${rowCount}\\r\\n${lines.join('\\r\\n')}\\r\\nE`;\r\n    }\r\n}\r\n","/**\r\n * An INI section.\r\n */\r\nexport type IniSection = Map<string, string>;\r\n\r\n/**\r\n * An INI file.\r\n */\r\nexport class IniFile {\r\n    properties: Map<string, string> = new Map();\r\n    sections: Map<string, IniSection> = new Map();\r\n\r\n    load(buffer: string): void {\r\n        // All properties added until a section is reached are added to the properties map.\r\n        // Once a section is reached, any further properties will be added to it until matching another section, etc.\r\n        let section: IniSection | null = this.properties;\r\n        const sections = this.sections;\r\n\r\n        for (const line of buffer.split('\\r\\n')) {\r\n            // INI defines comments as starting with a semicolon ';'.\r\n            // However, Warcraft 3 INI files use normal C comments '//'.\r\n            // w3x2lni,  use comments '--'.\r\n            // In addition, Warcraft 3 files have empty lines.\r\n            // Therefore, ignore any line matching any of these conditions.\r\n            if (line.length && !line.startsWith('//') && !line.startsWith(';') && !line.startsWith('--')) {\r\n                let match = line.match(/^\\[(.+?)\\]/);\r\n\r\n                if (match) {\r\n                    const name = match[1].trim();\r\n\r\n                    section = <IniSection | null>sections.get(name);\r\n\r\n                    if (!section) {\r\n                        section = new Map();\r\n\r\n                        sections.set(name, section);\r\n                    }\r\n                } else {\r\n                    match = line.match(/^(.+?)=(.*?)$/);\r\n\r\n                    if (match) {\r\n                        let value = match[2].trim();\r\n\r\n                        if (value[0] === '\"') {\r\n                            value = value.slice(1, -1);\r\n                        }\r\n\r\n                        section.set(match[1].trim(), value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    save(): string {\r\n        const lines = [];\r\n\r\n        for (const [key, value] of this.properties) {\r\n            lines.push(`${key}=${value}`);\r\n        }\r\n\r\n        for (const [name, section] of this.sections) {\r\n            lines.push(`[${name}]`);\r\n\r\n            for (const [key, value] of section) {\r\n                lines.push(`${key}=${value}`);\r\n            }\r\n        }\r\n\r\n        return lines.join('\\r\\n');\r\n    }\r\n\r\n    getSection(name: string): IniSection | undefined {\r\n        return this.sections.get(name);\r\n    }\r\n}\r\n","import SlkFile from './slk';\r\nimport { IniFile } from './ini';\r\n\r\n/**\r\n * A MappedData row.\r\n */\r\nexport class MappedDataRow {\r\n  map: { [key: string]: string } = {};\r\n\r\n  set(key: string, value: string | number): void {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n\r\n    this.map[key.toLowerCase()] = value;\r\n  }\r\n\r\n  string(key: string): string | undefined {\r\n    return this.map[key.toLowerCase()];\r\n  }\r\n\r\n  number(key: string): number {\r\n    const string = this.string(key);\r\n\r\n    if (!string) {\r\n      return 0;\r\n    }\r\n\r\n    return parseFloat(string);\r\n  }\r\n}\r\n\r\n/**\r\n * A structure that holds mapped data from INI and SLK files.\r\n * \r\n * In the case of SLK files, the first row is expected to hold the names of the columns.\r\n */\r\nexport class MappedData {\r\n  map: { [key: string]: MappedDataRow } = {};\r\n\r\n  constructor(buffer?: string) {\r\n    if (buffer) {\r\n      this.load(buffer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load data from an SLK file or an INI file.\r\n   * \r\n   * Note that this may override previous properties!\r\n   */\r\n  load(buffer: string): void {\r\n    if (buffer.startsWith('ID;')) {\r\n      const file = new SlkFile();\r\n      file.load(buffer);\r\n\r\n      const rows = file.rows;\r\n      const header = rows[0];\r\n      const map = this.map;\r\n\r\n      for (let i = 1, l = rows.length; i < l; i++) {\r\n        const row = rows[i];\r\n\r\n        // DialogueDemonBase.slk has an empty row.\r\n        if (row) {\r\n          const name = row[0];\r\n\r\n          // DialogueDemonBase.slk also has rows containing only a single underline.\r\n          if (name && name !== '_') {\r\n            if (!map[name]) {\r\n              map[name] = new MappedDataRow();\r\n            }\r\n\r\n            const mapped = map[name];\r\n\r\n            for (let j = 0, k = header.length; j < k; j++) {\r\n              let key = header[j];\r\n\r\n              // UnitBalance.slk doesn't define the name of one column.\r\n              if (key === undefined) {\r\n                key = `column${j}`;\r\n              }\r\n\r\n              mapped.map[key.toLowerCase()] = row[j];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const file = new IniFile();\r\n      file.load(buffer);\r\n\r\n      const sections = file.sections;\r\n      const map = this.map;\r\n\r\n      for (const [row, properties] of sections.entries()) {\r\n        if (!map[row]) {\r\n          map[row] = new MappedDataRow();\r\n        }\r\n\r\n        const mapped = map[row];\r\n\r\n        for (const [name, property] of properties) {\r\n          mapped.map[name.toLowerCase()] = property;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRow(key: string): MappedDataRow | undefined {\r\n    return this.map[key];\r\n  }\r\n\r\n  getProperty(key: string, name: string): string {\r\n    return this.map[key].map[name];\r\n  }\r\n\r\n  setRow(key: string, values: MappedDataRow): void {\r\n    this.map[key] = values;\r\n  }\r\n\r\n  findRow(key: string, expectedValue: string): MappedDataRow | undefined {\r\n    for (const row of Object.values(this.map)) {\r\n      if (row.string(key) === expectedValue) {\r\n        return row;\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n}\r\n","const cliffVariations = {\n  AAAB: 1,\n  AAAC: 1,\n  AABA: 1,\n  AABB: 2,\n  AABC: 0,\n  AACA: 1,\n  AACB: 0,\n  AACC: 1,\n  ABAA: 1,\n  ABAB: 1,\n  ABAC: 0,\n  ABBA: 2,\n  ABBB: 1,\n  ABBC: 0,\n  ABCA: 0,\n  ABCB: 0,\n  ABCC: 0,\n  ACAA: 1,\n  ACAB: 0,\n  ACAC: 1,\n  ACBA: 0,\n  ACBB: 0,\n  ACBC: 0,\n  ACCA: 1,\n  ACCB: 0,\n  ACCC: 1,\n  BAAA: 1,\n  BAAB: 1,\n  BAAC: 0,\n  BABA: 1,\n  BABB: 1,\n  BABC: 0,\n  BACA: 0,\n  BACB: 0,\n  BACC: 0,\n  BBAA: 1,\n  BBAB: 1,\n  BBAC: 0,\n  BBBA: 1,\n  BBCA: 0,\n  BCAA: 0,\n  BCAB: 0,\n  BCAC: 0,\n  BCBA: 0,\n  BCCA: 0,\n  CAAA: 1,\n  CAAB: 0,\n  CAAC: 1,\n  CABA: 0,\n  CABB: 0,\n  CABC: 0,\n  CACA: 1,\n  CACB: 0,\n  CACC: 1,\n  CBAA: 0,\n  CBAB: 0,\n  CBAC: 0,\n  CBBA: 0,\n  CBCA: 0,\n  CCAA: 1,\n  CCAB: 0,\n  CCAC: 1,\n  CCBA: 0,\n  CCCA: 1,\n};\n\nconst cityCliffVariations = {\n  AAAB: 2,\n  AAAC: 1,\n  AABA: 1,\n  AABB: 3,\n  AABC: 0,\n  AACA: 1,\n  AACB: 0,\n  AACC: 3,\n  ABAA: 1,\n  ABAB: 2,\n  ABAC: 0,\n  ABBA: 3,\n  ABBB: 0,\n  ABBC: 0,\n  ABCA: 0,\n  ABCB: 0,\n  ABCC: 0,\n  ACAA: 1,\n  ACAB: 0,\n  ACAC: 2,\n  ACBA: 0,\n  ACBB: 0,\n  ACBC: 0,\n  ACCA: 3,\n  ACCB: 0,\n  ACCC: 1,\n  BAAA: 1,\n  BAAB: 3,\n  BAAC: 0,\n  BABA: 2,\n  BABB: 0,\n  BABC: 0,\n  BACA: 0,\n  BACB: 0,\n  BACC: 0,\n  BBAA: 3,\n  BBAB: 1,\n  BBAC: 0,\n  BBBA: 1,\n  BBCA: 0,\n  BCAA: 0,\n  BCAB: 0,\n  BCAC: 0,\n  BCBA: 0,\n  BCCA: 0,\n  CAAA: 1,\n  CAAB: 0,\n  CAAC: 3,\n  CABA: 0,\n  CABB: 0,\n  CABC: 0,\n  CACA: 2,\n  CACB: 0,\n  CACC: 1,\n  CBAA: 0,\n  CBAB: 0,\n  CBAC: 0,\n  CBBA: 0,\n  CBCA: 0,\n  CCAA: 3,\n  CCAB: 0,\n  CCAC: 1,\n  CCBA: 0,\n  CCCA: 1,\n};\n\nexport default function getCliffVariation(dir: string, tag: string, variation: number): number {\n  if (dir === 'Cliffs') {\n    return Math.min(variation, cliffVariations[tag]);\n  } else {\n    return Math.min(variation, cityCliffVariations[tag]);\n  }\n}\n","const shader = `\nuniform mat4 u_VP;\nuniform sampler2D u_heightMap;\nuniform vec2 u_size;\nuniform vec2 u_offset;\nuniform bool u_extended[14];\nuniform float u_baseTileset;\n\nattribute vec2 a_position;\nattribute float a_InstanceID;\nattribute vec4 a_textures;\nattribute vec4 a_variations;\n\nvarying vec4 v_tilesets;\nvarying vec2 v_uv[4];\nvarying vec3 v_normal;\n\nvec2 getCell(float variation) {\n  if (variation < 16.0) {\n    return vec2(mod(variation, 4.0), floor(variation / 4.0));\n  } else {\n    variation -= 16.0;\n\n    return vec2(4.0 + mod(variation, 4.0), floor(variation / 4.0));\n  }\n}\n\nvec2 getUV(vec2 position, bool extended, float variation) {\n  vec2 cell = getCell(variation);\n  vec2 cellSize = vec2(extended ? 0.125 : 0.25, 0.25);\n  vec2 uv = vec2(position.x, 1.0 - position.y);\n  vec2 pixelSize = vec2(1.0 / 512.0, 1.0 / 256.0); /// Note: hardcoded to 512x256 for now.\n\n  return clamp((cell + uv) * cellSize, cell * cellSize + pixelSize, (cell + 1.0) * cellSize - pixelSize); \n}\n\nvoid main() {\n  vec4 textures = a_textures - u_baseTileset;\n  \n  if (textures[0] > 0.0 || textures[1] > 0.0 || textures[2] > 0.0 || textures[3] > 0.0) {\n    v_tilesets = textures;\n\n    v_uv[0] = getUV(a_position, u_extended[int(textures[0]) - 1], a_variations[0]);\n    v_uv[1] = getUV(a_position, u_extended[int(textures[1]) - 1], a_variations[1]);\n    v_uv[2] = getUV(a_position, u_extended[int(textures[2]) - 1], a_variations[2]);\n    v_uv[3] = getUV(a_position, u_extended[int(textures[3]) - 1], a_variations[3]);\n\n    vec2 corner = vec2(mod(a_InstanceID, u_size.x), floor(a_InstanceID / u_size.x));\n    vec2 base = corner + a_position;\n    float height = texture2D(u_heightMap, base / u_size).a;\n\n    float hL = texture2D(u_heightMap, vec2(base - vec2(1.0, 0.0)) / (u_size)).a;\n    float hR = texture2D(u_heightMap, vec2(base + vec2(1.0, 0.0)) / (u_size)).a;\n    float hD = texture2D(u_heightMap, vec2(base - vec2(0.0, 1.0)) / (u_size)).a;\n    float hU = texture2D(u_heightMap, vec2(base + vec2(0.0, 1.0)) / (u_size)).a;\n\n    v_normal = normalize(vec3(hL - hR, hD - hU, 2.0));\n\n    gl_Position = u_VP * vec4(base * 128.0 + u_offset, height * 128.0, 1.0);\n  } else {\n    v_tilesets = vec4(0.0);\n\n    v_uv[0] = vec2(0.0);\n    v_uv[1] = vec2(0.0);\n    v_uv[2] = vec2(0.0);\n    v_uv[3] = vec2(0.0);\n\n    v_normal = vec3(0.0);\n\n    gl_Position = vec4(0.0);\n  }\n}\n`;\n\nexport default shader;\n","// Used by all fragment shaders.\nconst shader = `\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n`;\n\nexport default shader;\n","import precision from './precision.glsl';\n\nconst shader = `\n${precision}\n\nuniform sampler2D u_tilesets[15];\n\nvarying vec4 v_tilesets;\nvarying vec2 v_uv[4];\nvarying vec3 v_normal;\n\nconst vec3 lightDirection = normalize(vec3(-0.3, -0.3, 0.25));\n\nvec4 sample(float tileset, vec2 uv) {\n  // 1.0 - 1.0 == 0.0 is not always true.\n  int i = int(tileset - 0.6);\n\n  if (i == 0) {\n    return texture2D(u_tilesets[0], uv);\n  } else if (i == 1) {\n    return texture2D(u_tilesets[1], uv);\n  } else if (i == 2) {\n    return texture2D(u_tilesets[2], uv);\n  } else if (i == 3) {\n    return texture2D(u_tilesets[3], uv);\n  } else if (i == 4) {\n    return texture2D(u_tilesets[4], uv);\n  } else if (i == 5) {\n    return texture2D(u_tilesets[5], uv);\n  } else if (i == 6) {\n    return texture2D(u_tilesets[6], uv);\n  } else if (i == 7) {\n    return texture2D(u_tilesets[7], uv);\n  } else if (i == 8) {\n    return texture2D(u_tilesets[8], uv);\n  } else if (i == 9) {\n    return texture2D(u_tilesets[9], uv);\n  } else if (i == 10) {\n    return texture2D(u_tilesets[10], uv);\n  } else if (i == 11) {\n    return texture2D(u_tilesets[11], uv);\n  } else if (i == 12) {\n    return texture2D(u_tilesets[12], uv);\n  } else if (i == 13) {\n    return texture2D(u_tilesets[13], uv);\n  } else if (i == 14) {\n    return texture2D(u_tilesets[14], uv);\n  }\n}\n\nvec4 blend(vec4 color, float tileset, vec2 uv) {\n  vec4 texel = sample(tileset, uv);\n\n  return mix(color, texel, texel.a);\n}\n\nvoid main() {\n  vec4 color = sample(v_tilesets[0], v_uv[0]);\n\n  if (v_tilesets[1] > 0.5) {\n    color = blend(color, v_tilesets[1], v_uv[1]);\n  }\n\n  if (v_tilesets[2] > 0.5) {\n    color = blend(color, v_tilesets[2], v_uv[2]);\n  }\n\n  if (v_tilesets[3] > 0.5) {\n    color = blend(color, v_tilesets[3], v_uv[3]);\n  }\n\n  //color *= clamp(dot(v_normal, lightDirection) + 0.45, 0.0, 1.0);\n\n  gl_FragColor = vec4(color.rgb, 1.0);\n}\n`;\n\nexport default shader;\n","import precision from './precision.glsl';\n\nconst shader = `\n// #extension GL_OES_standard_derivatives : enable\n\n${precision}\n\nuniform sampler2D u_texture1;\nuniform sampler2D u_texture2;\n\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying float v_texture;\nvarying vec3 v_position;\n\n// const vec3 lightDirection = normalize(vec3(-0.3, -0.3, 0.25));\n\nvec4 sample(float texture, vec2 uv) {\n  // int(0.0) == 0 is not always true.\n  int i = int(texture + 0.1);\n\n  if (i == 0) {\n    return texture2D(u_texture1, uv);\n  } else {\n    return texture2D(u_texture2, uv);\n  }\n}\n\nvoid main() {\n  vec4 color = sample(v_texture, v_uv);\n\n  // vec3 faceNormal = cross(dFdx(v_position), dFdy(v_position));\n  // vec3 normal = normalize((faceNormal + v_normal) * 0.5);\n\n  // color *= clamp(dot(normal, lightDirection) + 0.45, 0.1, 1.0);\n\n  gl_FragColor = color;\n}\n`;\n\nexport default shader;\n","import precision from './precision.glsl';\n\nconst shader = `\n${precision}\n\nuniform sampler2D u_waterTexture;\n\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nvoid main() {\n  gl_FragColor = texture2D(u_waterTexture, v_uv) * v_color;\n}\n`;\n\nexport default shader;\n","import MapViewer from './mapViewer';\n\nconst MdlxModel = ModelViewer.parsers.mdlx.Model;\n\n/**\n * A static terrain model.\n */\nexport default class TerrainModel {\n  map: MapViewer;\n  vertexBuffer: WebGLBuffer;\n  faceBuffer: WebGLBuffer;\n  normalsOffset: number;\n  uvsOffset: number;\n  elements: number;\n  locationAndTextureBuffer: WebGLBuffer;\n  texturesOffset: number;\n  instances: number;\n  vao: WebGLVertexArrayObjectOES | null;\n\n  constructor(map: MapViewer, arrayBuffer: ArrayBuffer, locations: number[], textures: number[], shader: any) {\n    const gl = map.viewer.gl;\n    const webgl = map.viewer.webgl;\n    const instancedArrays = <ANGLE_instanced_arrays>webgl.extensions['ANGLE_instanced_arrays'];\n    const vertexArrayObject = <OES_vertex_array_object>webgl.extensions['OES_vertex_array_object'];\n\n    const parser = new MdlxModel();\n    parser.load(arrayBuffer);\n\n    const geoset = parser.geosets[0];\n    const vertices = geoset.vertices;\n    const normals = geoset.normals;\n    const uvs = geoset.uvSets[0];\n    const faces = geoset.faces;\n    const normalsOffset = vertices.byteLength;\n    const uvsOffset = normalsOffset + normals.byteLength;\n    let vao = null;\n    const attribs = shader.attribs;\n\n    if (vertexArrayObject) {\n      vao = vertexArrayObject.createVertexArrayOES();\n      vertexArrayObject.bindVertexArrayOES(vao);\n    }\n\n    const vertexBuffer = <WebGLBuffer>gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, uvsOffset + uvs.byteLength, gl.STATIC_DRAW);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n    gl.bufferSubData(gl.ARRAY_BUFFER, normalsOffset, normals);\n    gl.bufferSubData(gl.ARRAY_BUFFER, uvsOffset, uvs);\n\n    if (vertexArrayObject) {\n      gl.vertexAttribPointer(attribs['a_position'], 3, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(attribs['a_position']);\n\n      gl.vertexAttribPointer(attribs['a_normal'], 3, gl.FLOAT, false, 0, normalsOffset);\n      gl.enableVertexAttribArray(attribs['a_normal']);\n\n      gl.vertexAttribPointer(attribs['a_uv'], 2, gl.FLOAT, false, 0, uvsOffset);\n      gl.enableVertexAttribArray(attribs['a_uv']);\n    }\n\n    const texturesOffset = locations.length * 4;\n    const locationAndTextureBuffer = <WebGLBuffer>gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, locationAndTextureBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texturesOffset + textures.length, gl.STATIC_DRAW);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array(locations));\n    gl.bufferSubData(gl.ARRAY_BUFFER, texturesOffset, new Uint8Array(textures));\n\n    if (vertexArrayObject) {\n      gl.vertexAttribPointer(attribs['a_instancePosition'], 3, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(attribs['a_instancePosition']);\n      instancedArrays.vertexAttribDivisorANGLE(attribs['a_instancePosition'], 1);\n\n      gl.vertexAttribPointer(attribs['a_instanceTexture'], 1, gl.UNSIGNED_BYTE, false, 0, texturesOffset);\n      gl.enableVertexAttribArray(attribs['a_instanceTexture']);\n      instancedArrays.vertexAttribDivisorANGLE(attribs['a_instanceTexture'], 1);\n\n    }\n\n    const faceBuffer = <WebGLBuffer>gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, faceBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n\n    if (vertexArrayObject) {\n      vertexArrayObject.bindVertexArrayOES(null);\n    }\n\n    this.map = map;\n    this.vertexBuffer = vertexBuffer;\n    this.faceBuffer = faceBuffer;\n    this.normalsOffset = normalsOffset;\n    this.uvsOffset = uvsOffset;\n    this.elements = faces.length;\n    this.locationAndTextureBuffer = locationAndTextureBuffer;\n    this.texturesOffset = texturesOffset;\n    this.instances = locations.length / 3;\n    this.vao = vao;\n  }\n\n  render(shader: any): void {\n    const viewer = this.map.viewer;\n    const gl = viewer.gl;\n    const webgl = viewer.webgl;\n    const instancedArrays = <ANGLE_instanced_arrays>webgl.extensions['ANGLE_instanced_arrays'];\n    const vertexArrayObject = <OES_vertex_array_object>webgl.extensions['OES_vertex_array_object'];\n    const attribs = shader.attribs;\n\n    if (vertexArrayObject) {\n      vertexArrayObject.bindVertexArrayOES(this.vao);\n    } else {\n      // Locations and textures.\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.locationAndTextureBuffer);\n      gl.vertexAttribPointer(attribs['a_instancePosition'], 3, gl.FLOAT, false, 0, 0);\n      gl.vertexAttribPointer(attribs['a_instanceTexture'], 1, gl.UNSIGNED_BYTE, false, 0, this.texturesOffset);\n\n      // Vertices.\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n      gl.vertexAttribPointer(attribs['a_position'], 3, gl.FLOAT, false, 0, 0);\n      gl.vertexAttribPointer(attribs['a_normal'], 3, gl.FLOAT, false, 0, this.normalsOffset);\n      gl.vertexAttribPointer(attribs['a_uv'], 2, gl.FLOAT, false, 0, this.uvsOffset);\n\n      // Faces.\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.faceBuffer);\n    }\n\n    // Draw.\n    instancedArrays.drawElementsInstancedANGLE(gl.TRIANGLES, this.elements, gl.UNSIGNED_SHORT, 0, this.instances);\n\n    if (vertexArrayObject) {\n      vertexArrayObject.bindVertexArrayOES(null);\n    }\n  }\n}\n","import BinaryStream from '../../../common/binarystream';\n\n/**\n * A random item.\n */\nexport default class RandomItem {\n  id = '\\0\\0\\0\\0';\n  chance = 0;\n\n  load(stream: BinaryStream): void {\n    this.id = stream.readBinary(4);\n    this.chance = stream.readInt32();\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.chance);\n  }\n}\n","import RandomItem from './randomitem';\nimport BinaryStream from '../../../common/binarystream';\n\n/**\n * A random item set.\n */\nexport default class RandomItemSet {\n  items: RandomItem[] = [];\n\n  load(stream: BinaryStream): void {\n    for (let i = 0, l = stream.readUint32(); i < l; i++) {\n      const item = new RandomItem();\n\n      item.load(stream);\n\n      this.items.push(item);\n    }\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeUint32(this.items.length);\n\n    for (const item of this.items) {\n      item.save(stream);\n    }\n  }\n\n  getByteLength(): number {\n    return 4 + this.items.length * 8;\n  }\n}\n","import BinaryStream from '../../common/binarystream';\nimport RandomItemSet from './randomitemset';\n\n/**\n * A doodad.\n */\nexport default class Doodad {\n  id = '\\0\\0\\0\\0';\n  variation = 0;\n  location = new Float32Array(3);\n  angle = 0;\n  scale = new Float32Array([1, 1, 1]);\n  /**\n   * @since Game version 1.32\n   */\n  skin = '\\0\\0\\0\\0';\n  flags = 0;\n  life = 0;\n  itemTable = -1;\n  itemSets: RandomItemSet[] = [];\n  editorId = 0;\n  u1 = new Uint8Array(8);\n\n  load(stream: BinaryStream, version: number, buildVersion: number): void {\n    this.id = stream.readBinary(4);\n    this.variation = stream.readInt32();\n    stream.readFloat32Array(this.location);\n    this.angle = stream.readFloat32();\n    stream.readFloat32Array(this.scale);\n\n    if (buildVersion > 131) {\n      this.skin = stream.readBinary(4);\n    }\n\n    this.flags = stream.readUint8();\n    this.life = stream.readUint8();\n\n    if (version > 7) {\n      this.itemTable = stream.readUint32();\n\n      for (let i = 0, l = stream.readUint32(); i < l; i++) {\n        const itemSet = new RandomItemSet();\n\n        itemSet.load(stream);\n\n        this.itemSets.push(itemSet);\n      }\n    }\n\n    this.editorId = stream.readInt32();\n  }\n\n  save(stream: BinaryStream, version: number, buildVersion: number): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.variation);\n    stream.writeFloat32Array(this.location);\n    stream.writeFloat32(this.angle);\n    stream.writeFloat32Array(this.scale);\n\n    if (buildVersion > 131) {\n      stream.writeBinary(this.skin);\n    }\n\n    stream.writeUint8(this.flags);\n    stream.writeUint8(this.life);\n\n    if (version > 7) {\n      stream.writeUint32(this.itemTable);\n      stream.writeUint32(this.itemSets.length);\n\n      for (const itemSet of this.itemSets) {\n        itemSet.save(stream);\n      }\n    }\n\n    stream.writeInt32(this.editorId);\n  }\n\n  getByteLength(version: number, buildVersion: number): number {\n    let size = 42;\n\n    if (buildVersion > 131) {\n      size += 4;\n    }\n\n    if (version > 7) {\n      size += 8;\n\n      for (const itemSet of this.itemSets) {\n        size += itemSet.getByteLength();\n      }\n    }\n\n    return size;\n  }\n}\n","import BinaryStream from '../../../common/binarystream';\n\n/**\n * A terrain doodad.\n *\n * This type of doodad works much like cliffs.\n * It uses the height of the terrain, and gets affected by the ground heightmap.\n * It cannot be manipulated in any way in the World Editor once placed.\n * Indeed, the only way to change it is to remove it by changing cliffs around it.\n */\nexport default class TerrainDoodad {\n  id = '\\0\\0\\0\\0';\n  u1 = 0;\n  location = new Uint32Array(2);\n\n  load(stream: BinaryStream, _version: number): void {\n    this.id = stream.readBinary(4);\n    this.u1 = stream.readUint32();\n    stream.readUint32Array(this.location);\n  }\n\n  save(stream: BinaryStream, _version: number): void {\n    stream.writeBinary(this.id);\n    stream.writeUint32(this.u1);\n    stream.writeUint32Array(this.location);\n  }\n}\n","import BinaryStream from '../../common/binarystream';\r\nimport Doodad from './doodad';\r\nimport TerrainDoodad from './terraindoodad';\r\n\r\n/**\r\n * war3map.doo - the doodad and destructible file.\r\n */\r\nexport default class War3MapDoo {\r\n  version = 0;\r\n  u1 = new Uint8Array(4);\r\n  doodads: Doodad[] = [];\r\n  u2 = new Uint8Array(4);\r\n  terrainDoodads: TerrainDoodad[] = [];\r\n\r\n  load(buffer: ArrayBuffer | Uint8Array, buildVersion: number): void {\r\n    const stream = new BinaryStream(buffer);\r\n\r\n    if (stream.readBinary(4) !== 'W3do') {\r\n      throw new Error('Not a valid war3map.doo buffer');\r\n    }\r\n\r\n    this.version = stream.readInt32();\r\n    stream.readUint8Array(this.u1);\r\n\r\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\r\n      const doodad = new Doodad();\r\n\r\n      doodad.load(stream, this.version, buildVersion);\r\n\r\n      this.doodads.push(doodad);\r\n    }\r\n\r\n    stream.readUint8Array(this.u2);\r\n\r\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\r\n      const terrainDoodad = new TerrainDoodad();\r\n\r\n      terrainDoodad.load(stream, this.version);\r\n\r\n      this.terrainDoodads.push(terrainDoodad);\r\n    }\r\n  }\r\n\r\n  save(buildVersion: number): Uint8Array {\r\n    const stream = new BinaryStream(new ArrayBuffer(this.getByteLength(buildVersion)));\r\n\r\n    stream.writeBinary('W3do');\r\n    stream.writeInt32(this.version);\r\n    stream.writeUint8Array(this.u1);\r\n    stream.writeUint32(this.doodads.length);\r\n\r\n    for (const doodad of this.doodads) {\r\n      doodad.save(stream, this.version, buildVersion);\r\n    }\r\n\r\n    stream.writeUint8Array(this.u2);\r\n    stream.writeUint32(this.terrainDoodads.length);\r\n\r\n    for (const terrainDoodad of this.terrainDoodads) {\r\n      terrainDoodad.save(stream, this.version);\r\n    }\r\n\r\n    return stream.uint8array;\r\n  }\r\n\r\n  getByteLength(buildVersion: number): number {\r\n    let size = 24 + this.terrainDoodads.length * 16;\r\n\r\n    for (const doodad of this.doodads) {\r\n      size += doodad.getByteLength(this.version, buildVersion);\r\n    }\r\n\r\n    return size;\r\n  }\r\n}\r\n","import { vec3, vec4, quat, mat4 } from 'gl-matrix';\n\nexport const VEC3_UNIT_X = vec3.fromValues(1, 0, 0);\nexport const VEC3_UNIT_Y = vec3.fromValues(0, 1, 0);\nexport const VEC3_UNIT_Z = vec3.fromValues(0, 0, 1);\nexport const VEC3_ZERO = vec3.create();\nexport const VEC3_ONE = vec3.fromValues(1, 1, 1);\nexport const QUAT_ZERO = quat.fromValues(0, 0, 0, 0);\nexport const QUAT_DEFAULT = quat.create();\n\nconst vec4Heap = vec4.create();\n\nexport function unproject(out: vec3, v: vec3, inverseMatrix: mat4, viewport: vec4): vec3 {\n  const x = 2 * (v[0] - viewport[0]) / viewport[2] - 1;\n  const y = 1 - 2 * (v[1] - viewport[1]) / viewport[3];\n  const z = 2 * v[2] - 1;\n\n  vec4.set(vec4Heap, x, y, z, 1);\n  vec4.transformMat4(vec4Heap, vec4Heap, inverseMatrix);\n  vec3.set(out, vec4Heap[0] / vec4Heap[3], vec4Heap[1] / vec4Heap[3], vec4Heap[2] / vec4Heap[3]);\n\n  return out;\n}\n\n/**\n * Get the distance of a point from a plane.\n * \n *     dot(plane, vec4(point, 1))\n */\nexport function distanceToPlane(plane: vec4, point: vec3): number {\n  return plane[0] * point[0] + plane[1] * point[1] + plane[2] * point[2] + plane[3];\n}\n\n/**\n * Get the distance of a point from a plane.\n * \n *     dot(plane, vec4(x, y, 0, 1))\n */\nexport function distanceToPlane2(plane: vec4, x: number, y: number): number {\n  return plane[0] * x + plane[1] * y + plane[3];\n}\n\n/**\n * Get the distance of a point from a plane.\n * \n *     dot(plane, vec4(x, y, z, 1))\n */\nexport function distanceToPlane3(plane: vec4, x: number, y: number, z: number): number {\n  return plane[0] * x + plane[1] * y + plane[2] * z + plane[3];\n}\n\n/**\n * Test if a sphere with the given center and radius intersects the given planes.\n * If it doesn't, the index of the first plane that proved this is returned.\n * Otherwise returns -1.\n *\n * If first is given, the test will begin from the plane at that index.\n */\nexport function testSphere(planes: vec4[], x: number, y: number, z: number, r: number, first: number): number {\n  if (first === -1) {\n    first = 0;\n  }\n\n  for (let i = 0; i < 6; i++) {\n    const index = (first + i) % 6;\n\n    if (distanceToPlane3(planes[index], x, y, z) <= -r) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Test if a cell with the given coordinates intersects the given planes.\n * If it doesn't, the index of the first plane that proved this is returned.\n * Otherwise returns -1.\n *\n * If first is given, the test will begin from the plane at that index.\n */\nexport function testCell(planes: vec4[], left: number, right: number, bottom: number, top: number, first: number): number {\n  if (first === -1) {\n    first = 0;\n  }\n\n  for (let i = 0; i < 6; i++) {\n    const index = (first + i) % 6;\n    const plane = planes[index];\n\n    if (distanceToPlane2(plane, left, bottom) < 0 &&\n      distanceToPlane2(plane, left, top) < 0 &&\n      distanceToPlane2(plane, right, top) < 0 &&\n      distanceToPlane2(plane, right, bottom) < 0) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nexport function planeLength(plane: vec4): number {\n  return Math.hypot(plane[0], plane[1], plane[2]);\n}\n\n/**\n * Normalize a plane.\n * \n * Note that this is not the same as normalizing a vec4.\n */\nexport function normalizePlane(out: vec4, plane: vec4): void {\n  const len = planeLength(plane);\n\n  out[0] = plane[0] / len;\n  out[1] = plane[1] / len;\n  out[2] = plane[2] / len;\n  out[3] = plane[3] / len;\n}\n\n/**\n * Unpacks a matrix's planes.\n */\nexport function unpackPlanes(planes: vec4[], m: mat4): void {\n  // eslint-disable-next-line one-var\n  const a00 = m[0], a01 = m[4], a02 = m[8], a03 = m[12],\n    a10 = m[1], a11 = m[5], a12 = m[9], a13 = m[13],\n    a20 = m[2], a21 = m[6], a22 = m[10], a23 = m[14],\n    a30 = m[3], a31 = m[7], a32 = m[11], a33 = m[15];\n  let plane;\n\n  // Left clipping plane\n  plane = planes[0];\n  plane[0] = a30 + a00;\n  plane[1] = a31 + a01;\n  plane[2] = a32 + a02;\n  plane[3] = a33 + a03;\n\n  // Right clipping plane\n  plane = planes[1];\n  plane[0] = a30 - a00;\n  plane[1] = a31 - a01;\n  plane[2] = a32 - a02;\n  plane[3] = a33 - a03;\n\n  // Top clipping plane\n  plane = planes[2];\n  plane[0] = a30 - a10;\n  plane[1] = a31 - a11;\n  plane[2] = a32 - a12;\n  plane[3] = a33 - a13;\n\n  // Bottom clipping plane\n  plane = planes[3];\n  plane[0] = a30 + a10;\n  plane[1] = a31 + a11;\n  plane[2] = a32 + a12;\n  plane[3] = a33 + a13;\n\n  // Near clipping plane\n  plane = planes[4];\n  plane[0] = a30 + a20;\n  plane[1] = a31 + a21;\n  plane[2] = a32 + a22;\n  plane[3] = a33 + a23;\n\n  // Far clipping plane\n  plane = planes[5];\n  plane[0] = a30 - a20;\n  plane[1] = a31 - a21;\n  plane[2] = a32 - a22;\n  plane[3] = a33 - a23;\n\n  normalizePlane(planes[0], planes[0]);\n  normalizePlane(planes[1], planes[1]);\n  normalizePlane(planes[2], planes[2]);\n  normalizePlane(planes[3], planes[3]);\n  normalizePlane(planes[4], planes[4]);\n  normalizePlane(planes[5], planes[5]);\n}\n\nconst F = vec3.create();\nconst R = vec3.create();\nconst U = vec3.create();\n\n/**\n * A look-at matrix, but for quaternions.\n * \n * See https://stackoverflow.com/a/52551983/2503048\n */\nexport function quatLookAt(out: quat, from: vec3, to: vec3, worldUp: vec3): quat {\n  vec3.normalize(F, vec3.sub(F, to, from));\n  vec3.normalize(R, vec3.cross(R, worldUp, F));\n  vec3.cross(U, R, F);\n\n  const trace = R[0] + U[2] + F[1];\n\n  if (trace > 0.0) {\n    const s = 0.5 / Math.sqrt(trace + 1.0);\n\n    out[3] = 0.25 / s;\n    out[0] = (U[1] - F[2]) * s;\n    out[2] = (F[0] - R[1]) * s;\n    out[1] = (R[2] - U[0]) * s;\n  } else {\n    if (R[0] > U[2] && R[0] > F[1]) {\n      const s = 2.0 * Math.sqrt(1.0 + R[0] - U[2] - F[1]);\n\n      out[3] = (U[1] - F[2]) / s;\n      out[0] = 0.25 * s;\n      out[2] = (U[0] + R[2]) / s;\n      out[1] = (F[0] + R[1]) / s;\n    } else if (U[2] > F[1]) {\n      const s = 2.0 * Math.sqrt(1.0 + U[2] - R[0] - F[1]);\n\n      out[3] = (F[0] - R[1]) / s;\n      out[0] = (U[0] + R[2]) / s;\n      out[2] = 0.25 * s;\n      out[1] = (F[2] + U[1]) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + F[1] - R[0] - U[2]);\n\n      out[3] = (R[2] - U[0]) / s;\n      out[0] = (F[0] + R[1]) / s;\n      out[2] = (F[2] + U[1]) / s;\n      out[1] = 0.25 * s;\n    }\n  }\n\n  return out;\n}\n","interface FilteredSequence {\n  sequence: any;\n  index: number;\n}\n\nfunction sequenceSorter(a: FilteredSequence, b: FilteredSequence): number {\n  return a.sequence.rarity - b.sequence.rarity;\n}\n\nfunction filterSequences(type: string, sequences: any[]): FilteredSequence[] {\n  const filtered = [];\n\n  for (let i = 0, l = sequences.length; i < l; i++) {\n    const sequence = sequences[i],\n      name = sequence.name.split('-')[0].replace(/\\d/g, '').trim().toLowerCase();\n\n    if (name === type) {\n      filtered.push({ sequence, index: i });\n    }\n  }\n\n  return filtered;\n}\n\nfunction selectSequence(type: string, sequences: any[]): FilteredSequence {\n  const filtered = filterSequences(type, sequences);\n  let i, l;\n\n  filtered.sort(sequenceSorter);\n\n  for (i = 0, l = filtered.length; i < l; i++) {\n    const sequence = filtered[i].sequence;\n    const rarity = sequence.rarity;\n\n    if (rarity === 0) {\n      break;\n    }\n\n    if (Math.random() * 10 > rarity) {\n      return filtered[i];\n    }\n  }\n\n  const sequencesLeft = filtered.length - i;\n  const random = i + Math.floor(Math.random() * sequencesLeft);\n  const sequence = filtered[random];\n\n  return sequence;\n}\n\nexport default function randomStandSequence(target: any): void {\n  const model = target.model;\n  const sequences = model.sequences;\n  const sequence = selectSequence('stand', sequences);\n\n  if (sequence) {\n    target.setSequence(sequence.index);\n  }\n}\n","import MapViewer from './mapViewer';\nimport randomStandSequence from './standsequence';\n\nexport enum WidgetState {\n  IDLE,\n  WALK,\n}\n\n/**\n * A widget.\n */\nexport class Widget {\n  instance: any;\n  state = WidgetState.IDLE;\n\n  constructor(map: MapViewer, model: any) {\n    this.instance = model.addInstance();\n\n    this.instance.setScene(map.worldScene);\n  }\n\n  update(): void {\n    if (this.instance.sequenceEnded || this.instance.sequence === -1) {\n      if (this.state === WidgetState.IDLE) {\n        randomStandSequence(this.instance);\n      }\n    }\n  }\n}\n","import { quat } from 'gl-matrix';\nimport { VEC3_UNIT_Z } from '../common/gl-matrix-addon';\nimport Doodaded from '../w3xReader/doo/doodad';\nimport { MappedDataRow } from '../w3xReader/MappedData';\nimport MapViewer from './mapViewer';\nimport { Widget } from './widget';\n\n/**\n * A doodad.\n */\nexport default class Doodad extends Widget {\n  row: MappedDataRow;\n\n  constructor(map: MapViewer, model: any, row: MappedDataRow, doodad: Doodaded) {\n    super(map, model);\n\n    const instance = this.instance;\n\n    instance.move(doodad.location);\n    instance.rotateLocal(quat.setAxisAngle(quat.create(), VEC3_UNIT_Z, doodad.angle));\n    instance.scale(doodad.scale);\n    instance.setScene(map.worldScene);\n\n    this.instance = instance;\n    this.row = row;\n  }\n}\n","import { quat, vec3 } from 'gl-matrix';\nimport { VEC3_UNIT_Z } from '../common/gl-matrix-addon';\nimport { MappedDataRow } from '../w3xReader/MappedData';\nimport MapViewer from './mapViewer';\nimport { Widget } from './widget';\nimport DooUnit from '../w3xReader/unitsdoo/unit';\n\nconst heapZ = vec3.create();\n\n/**\n * A unit.\n */\nexport default class Unit extends Widget {\n  /**\n   * StartLocation.mdx (and others?) seems to be built-in, and has no row.\n   */\n  row: MappedDataRow | undefined;\n\n  constructor(map: MapViewer, model: any, row: MappedDataRow | undefined, unit: DooUnit) {\n    super(map, model);\n\n    const instance = this.instance;\n\n    instance.move(<vec3>unit.location);\n    instance.rotateLocal(quat.setAxisAngle(quat.create(), VEC3_UNIT_Z, unit.angle));\n    instance.scale(<vec3>unit.scale);\n    instance.setTeamColor(unit.player);\n    instance.setScene(map.worldScene);\n\n    if (row) {\n      heapZ[2] = row.number('moveHeight');\n\n      instance.move(heapZ);\n      instance.setVertexColor([row.number('red') / 255, row.number('green') / 255, row.number('blue') / 255, 1]);\n      instance.uniformScale(row.number('modelScale'));\n    }\n\n    this.instance = instance;\n    this.row = row;\n  }\n}\n","import BinaryStream from \"../../common/binarystream\";\n\n\n/**\n * A dropped item.\n */\nexport default class DroppedItem {\n  id = '\\0\\0\\0\\0';\n  chance = 0;\n\n  load(stream: BinaryStream): void {\n    this.id = stream.readBinary(4);\n    this.chance = stream.readInt32();\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.chance);\n  }\n}\n","\nimport BinaryStream from '../../common/binarystream';\nimport DroppedItem from './droppeditem';\n\n/**\n * A dropped item set.\n */\nexport default class DroppedItemSet {\n  items: DroppedItem[] = [];\n\n  load(stream: BinaryStream): void {\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\n      const item = new DroppedItem();\n\n      item.load(stream);\n\n      this.items[i] = item;\n    }\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeInt32(this.items.length);\n\n    for (const item of this.items) {\n      item.save(stream);\n    }\n  }\n\n  getByteLength(): number {\n    return 4 + this.items.length * 8;\n  }\n}\n","import BinaryStream from '../../../common/binarystream';\n\n/**\n * An inventory item.\n */\nexport default class InventoryItem {\n  slot = 0;\n  id = '\\0\\0\\0\\0';\n\n  load(stream: BinaryStream): void {\n    this.slot = stream.readInt32();\n    this.id = stream.readBinary(4);\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeInt32(this.slot);\n    stream.writeBinary(this.id);\n  }\n}\n","import BinaryStream from \"../../common/binarystream\";\n\n\n/**\n * A modified ability.\n */\nexport default class ModifiedAbility {\n  id = '\\0\\0\\0\\0';\n  activeForAutocast = 0;\n  heroLevel = 1;\n\n  load(stream: BinaryStream): void {\n    this.id = stream.readBinary(4);\n    this.activeForAutocast = stream.readInt32();\n    this.heroLevel = stream.readInt32();\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.activeForAutocast);\n    stream.writeInt32(this.heroLevel);\n  }\n}\n","import BinaryStream from \"../../common/binarystream\";\n\n\n/**\n * A random unit.\n */\nexport default class RandomUnit {\n  id = '\\0\\0\\0\\0';\n  chance = 0;\n\n  load(stream: BinaryStream): void {\n    this.id = stream.readBinary(4);\n    this.chance = stream.readInt32();\n  }\n\n  save(stream: BinaryStream): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.chance);\n  }\n}\n","\nimport BinaryStream from '../../common/binarystream';\nimport DroppedItemSet from './droppeditemset';\nimport InventoryItem from './inventoryitem';\nimport ModifiedAbility from './modifiedability';\nimport RandomUnit from './randomunit';\n\n/**\n * A unit.\n */\nexport default class Unit {\n  id = '\\0\\0\\0\\0';\n  variation = 0;\n  location = new Float32Array(3);\n  angle = 0;\n  scale = new Float32Array([1, 1, 1]);\n  /**\n   * @since Game version 1.32\n   */\n  skin = '\\0\\0\\0\\0';\n  flags = 0;\n  player = 0;\n  unknown = 0;\n  hitpoints = -1;\n  mana = -1;\n  /**\n   * @since 8\n   */\n  droppedItemTable = 0;\n  droppedItemSets: DroppedItemSet[] = [];\n  goldAmount = 0;\n  targetAcquisition = 0;\n  heroLevel = 0;\n  /**\n   * @since 8\n   */\n  heroStrength = 0;\n  /**\n   * @since 8\n   */\n  heroAgility = 0;\n  /**\n   * @since 8\n   */\n  heroIntelligence = 0;\n  itemsInInventory: InventoryItem[] = [];\n  modifiedAbilities: ModifiedAbility[] = [];\n  randomFlag = 0;\n  level = new Uint8Array(3);\n  itemClass = 0;\n  unitGroup = 0;\n  positionInGroup = 0;\n  randomUnitTables: RandomUnit[] = [];\n  customTeamColor = 0;\n  waygate = 0;\n  creationNumber = 0;\n\n  load(stream: BinaryStream, version: number, subversion: number, buildVersion: number): void {\n    this.id = stream.readBinary(4);\n    this.variation = stream.readInt32();\n    stream.readFloat32Array(this.location);\n    this.angle = stream.readFloat32();\n    stream.readFloat32Array(this.scale);\n\n    if (buildVersion > 131) {\n      this.skin = stream.readBinary(4);\n    }\n\n    this.flags = stream.readUint8();\n    this.player = stream.readInt32();\n    this.unknown = stream.readUint16();\n    this.hitpoints = stream.readInt32();\n    this.mana = stream.readInt32();\n\n    if (subversion > 10) {\n      this.droppedItemTable = stream.readInt32();\n    }\n\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\n      const set = new DroppedItemSet();\n\n      set.load(stream);\n\n      this.droppedItemSets[i] = set;\n    }\n\n    this.goldAmount = stream.readInt32();\n    this.targetAcquisition = stream.readFloat32();\n    this.heroLevel = stream.readInt32();\n\n    if (subversion > 10) {\n      this.heroStrength = stream.readInt32();\n      this.heroAgility = stream.readInt32();\n      this.heroIntelligence = stream.readInt32();\n    }\n\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\n      const item = new InventoryItem();\n\n      item.load(stream);\n\n      this.itemsInInventory[i] = item;\n    }\n\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\n      const modifiedAbility = new ModifiedAbility();\n\n      modifiedAbility.load(stream);\n\n      this.modifiedAbilities[i] = modifiedAbility;\n    }\n\n    this.randomFlag = stream.readInt32();\n\n    if (this.randomFlag === 0) {\n      stream.readUint8Array(this.level); // 24bit number\n      this.itemClass = stream.readUint8();\n    } else if (this.randomFlag === 1) {\n      this.unitGroup = stream.readUint32();\n      this.positionInGroup = stream.readUint32();\n    } else if (this.randomFlag === 2) {\n      for (let i = 0, l = stream.readInt32(); i < l; i++) {\n        const randomUnit = new RandomUnit();\n\n        randomUnit.load(stream);\n\n        this.randomUnitTables[i] = randomUnit;\n      }\n    }\n\n    this.customTeamColor = stream.readInt32();\n    this.waygate = stream.readInt32();\n    this.creationNumber = stream.readInt32();\n  }\n\n  save(stream: BinaryStream, version: number, subversion: number, buildVersion: number): void {\n    stream.writeBinary(this.id);\n    stream.writeInt32(this.variation);\n    stream.writeFloat32Array(this.location);\n    stream.writeFloat32(this.angle);\n    stream.writeFloat32Array(this.scale);\n\n    if (buildVersion > 131) {\n      stream.writeBinary(this.skin);\n    }\n\n    stream.writeUint8(this.flags);\n    stream.writeInt32(this.player);\n    stream.writeUint16(this.unknown);\n    stream.writeInt32(this.hitpoints);\n    stream.writeInt32(this.mana);\n\n    if (subversion > 10) {\n      stream.writeInt32(this.droppedItemTable);\n    }\n\n    stream.writeInt32(this.droppedItemSets.length);\n\n    for (const droppedItemSet of this.droppedItemSets) {\n      droppedItemSet.save(stream);\n    }\n\n    stream.writeInt32(this.goldAmount);\n    stream.writeFloat32(this.targetAcquisition);\n    stream.writeInt32(this.heroLevel);\n\n    if (subversion > 10) {\n      stream.writeInt32(this.heroStrength);\n      stream.writeInt32(this.heroAgility);\n      stream.writeInt32(this.heroIntelligence);\n    }\n\n    stream.writeInt32(this.itemsInInventory.length);\n\n    for (const itemInInventory of this.itemsInInventory) {\n      itemInInventory.save(stream);\n    }\n\n    stream.writeInt32(this.modifiedAbilities.length);\n\n    for (const modifiedAbility of this.modifiedAbilities) {\n      modifiedAbility.save(stream);\n    }\n\n    stream.writeInt32(this.randomFlag);\n\n    if (this.randomFlag === 0) {\n      stream.writeUint8Array(this.level);\n      stream.writeUint8(this.itemClass);\n    } else if (this.randomFlag === 1) {\n      stream.writeUint32(this.unitGroup);\n      stream.writeUint32(this.positionInGroup);\n    } else if (this.randomFlag === 2) {\n      stream.writeInt32(this.randomUnitTables.length);\n\n      for (const randomUnitTable of this.randomUnitTables) {\n        randomUnitTable.save(stream);\n      }\n    }\n\n    stream.writeInt32(this.customTeamColor);\n    stream.writeInt32(this.waygate);\n    stream.writeInt32(this.creationNumber);\n  }\n\n  getByteLength(version: number, subversion: number, buildVersion: number): number {\n    let size = 91;\n\n    if (buildVersion > 131) {\n      size += 4;\n    }\n\n    if (subversion > 10) {\n      size += 16;\n    }\n\n    for (const droppedItemSet of this.droppedItemSets) {\n      size += droppedItemSet.getByteLength();\n    }\n\n    size += this.itemsInInventory.length * 8;\n\n    size += this.modifiedAbilities.length * 12;\n\n    if (this.randomFlag === 0) {\n      size += 4;\n    } else if (this.randomFlag === 1) {\n      size += 8;\n    } else if (this.randomFlag === 2) {\n      size += 4 + this.randomUnitTables.length * 8;\n    }\n\n    return size;\n  }\n}\n","\r\nimport BinaryStream from '../../common/binarystream';\r\nimport Unit from './unit';\r\n\r\n/**\r\n * war3mapUnits.doo - the units and items file.\r\n */\r\nexport default class War3MapUnitsDoo {\r\n  version = 8;\r\n  subversion = 11;\r\n  units: Unit[] = [];\r\n\r\n  load(buffer: ArrayBuffer | Uint8Array, buildVersion: number): void {\r\n    const stream = new BinaryStream(buffer);\r\n\r\n    if (stream.readBinary(4) !== 'W3do') {\r\n      throw new Error('Not a valid war3mapUnits.doo buffer');\r\n    }\r\n\r\n    this.version = stream.readInt32();\r\n    this.subversion = stream.readUint32();\r\n\r\n    for (let i = 0, l = stream.readInt32(); i < l; i++) {\r\n      const unit = new Unit();\r\n\r\n      unit.load(stream, this.version, this.subversion, buildVersion);\r\n\r\n      this.units[i] = unit;\r\n    }\r\n  }\r\n\r\n  save(buildVersion: number): Uint8Array {\r\n    const stream = new BinaryStream(new ArrayBuffer(this.getByteLength(buildVersion)));\r\n\r\n    stream.writeBinary('W3do');\r\n    stream.writeInt32(this.version);\r\n    stream.writeUint32(this.subversion);\r\n    stream.writeInt32(this.units.length);\r\n\r\n    for (const unit of this.units) {\r\n      unit.save(stream, this.version, this.subversion, buildVersion);\r\n    }\r\n\r\n    return stream.uint8array;\r\n  }\r\n\r\n  getByteLength(buildVersion: number): number {\r\n    let size = 16;\r\n\r\n    for (const unit of this.units) {\r\n      size += unit.getByteLength(this.version, this.subversion, buildVersion);\r\n    }\r\n\r\n    return size;\r\n  }\r\n}\r\n","import War3MapW3e from \"../w3xReader/w3e/w3e\";\r\nimport Corner from '../w3xReader/w3e/corner';\r\nimport { MappedData, MappedDataRow } from \"../w3xReader/MappedData\";\r\nimport getCliffVariation from \"./variations\";\r\nimport unique from \"../common/arrayunique\";\r\nimport groundVert from './shaders/ground.vert';\r\nimport groundFrag from './shaders/ground.frag';\r\nimport cliffsVert from './shaders/cliffs.vert';\r\nimport cliffsFrag from './shaders/cliffs.frag';\r\nimport waterVert from './shaders/water.vert';\r\nimport waterFrag from './shaders/water.frag';\r\nimport TerrainModel from \"./terrainmodel\";\r\nimport War3MapDoo from \"../w3xReader/doo/doo\";\r\nimport Doodad from \"./doodad\";\r\nimport Unit from \"./unit\";\r\nimport War3MapUnitsDoo from \"../w3xReader/unitsdoo/unitsdoo\";\r\n\r\nexport type FetchDataTypeName = 'image' | 'text' | 'arrayBuffer' | 'bytes' | 'blob';\r\n\r\nexport default class MapViewer {\r\n\r\n    w3e: War3MapW3e;\r\n    viewer: any;\r\n    corners: Corner[][];\r\n    // 地图中心偏移量\r\n    centerOffset = new Float32Array(2);\r\n    // 地图大小\r\n    mapSize = new Int32Array(2);\r\n\r\n    /**\r\n     * 地面贴图数据\r\n     */\r\n    terrainData = new MappedData();\r\n    /**\r\n     * 悬崖贴图数据\r\n     */\r\n    cliffTypesData = new MappedData();\r\n    /**\r\n     * 水面贴图数据\r\n     */\r\n    waterData = new MappedData();\r\n    /**\r\n     * 装饰物数据\r\n     */\r\n    doodadsData = new MappedData();\r\n    /**\r\n     * 单位数据\r\n     */\r\n    unitsData = new MappedData();\r\n    /**\r\n     * 贴图组\r\n     */\r\n    tilesets: MappedDataRow[] = [];\r\n    cliffTilesets: MappedDataRow[] = [];\r\n    blightTextureIndex: number;\r\n    waterHeightOffset: number;\r\n    waterIncreasePerFrame: number;\r\n    tilesetTextures: any[] = [];\r\n    cliffTextures: any[] = [];\r\n    waterTextures: any[] = [];\r\n    columns: number;\r\n    rows: number;\r\n\r\n    maxDeepColor = new Float32Array(4);\r\n    minDeepColor = new Float32Array(4);\r\n    maxShallowColor = new Float32Array(4);\r\n    minShallowColor = new Float32Array(4);\r\n\r\n    vertexBuffer: WebGLBuffer | null = null;\r\n    faceBuffer: WebGLBuffer | null = null;\r\n    instanceBuffer: WebGLBuffer | null = null;\r\n    textureBuffer: WebGLBuffer | null = null;\r\n    variationBuffer: WebGLBuffer | null = null;\r\n    waterBuffer: WebGLBuffer | null = null;\r\n    heightMap: WebGLTexture | null = null;\r\n    waterHeightMap: WebGLTexture | null = null;\r\n    cliffHeightMap: WebGLTexture | null = null;\r\n\r\n    terrainReady: boolean;\r\n    anyReady: boolean;\r\n    cliffsReady: boolean;\r\n\r\n    groundShader: any;\r\n    cliffShader: any;\r\n    waterShader: any;\r\n\r\n    worldScene: any;\r\n    cliffModels: any[];\r\n    waterIndex: number = 0;\r\n    doodads: Doodad[] = [];\r\n    units: Unit[] = [];\r\n    unitsReady: boolean;\r\n\r\n\r\n    constructor(viewer: any, worldScene: any, buf: ArrayBuffer) {\r\n        this.viewer = viewer;\r\n        this.worldScene = worldScene;\r\n\r\n        this.groundShader = this.viewer.webgl.createShader(groundVert, groundFrag);\r\n        this.cliffShader = this.viewer.webgl.createShader(cliffsVert, cliffsFrag);\r\n        this.waterShader = this.viewer.webgl.createShader(waterVert, waterFrag);\r\n\r\n        this.w3e = new War3MapW3e();\r\n        this.w3e.load(buf);\r\n        this.loadBaseFiles().then(() => {\r\n            this.loadTerrainCliffsAndWater();\r\n            this.loadDoodadsAndDestructibles();\r\n            this.loadUnitsAndItems();\r\n        });\r\n    }\r\n\r\n\r\n    async loadBaseFile(path: string, dataType: FetchDataTypeName): Promise<any | undefined> {\r\n        if (dataType === 'text') {\r\n            return await message.loadTextArray(path);\r\n        }\r\n        return await message.loadBlp(path);\r\n    }\r\n\r\n    async loadBaseFiles() {\r\n        const promises = [\r\n            this.loadBaseFile('TerrainArt\\\\Terrain.slk', 'text'),\r\n            this.loadBaseFile('TerrainArt\\\\CliffTypes.slk', 'text'),\r\n            this.loadBaseFile('TerrainArt\\\\Water.slk', 'text'),\r\n            this.loadBaseFile('Doodads\\\\Doodads.slk', 'text'),\r\n            this.loadBaseFile('Doodads\\\\DoodadMetaData.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\DestructableData.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\DestructableMetaData.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\UnitData.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\unitUI.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\ItemData.slk', 'text'),\r\n            this.loadBaseFile('Units\\\\UnitMetaData.slk', 'text'),\r\n            this.loadBaseFile('table\\\\unit.ini', 'text'),\r\n        ];\r\n\r\n        const [terrain, cliffTypes, water, doodads, doodadMetaData, destructableData, destructableMetaData, unitData, unitUi, itemData, unitMetaData, customUnit] = await Promise.all(promises);\r\n        if (!terrain || !cliffTypes || !water || !doodads || !doodadMetaData || !destructableData || !destructableMetaData || !unitData || !unitUi || !itemData || !unitMetaData) {\r\n            throw new Error('Failed to load the base files');\r\n        }\r\n\r\n        this.terrainData.load(<string>terrain.join('\\n'));\r\n        this.cliffTypesData.load(<string>cliffTypes.join('\\n'));\r\n        this.waterData.load(<string>water.join('\\n'));\r\n        this.doodadsData.load(<string>doodads.join('\\n'));\r\n        this.doodadsData.load(<string>destructableData.join('\\n'));\r\n        this.unitsData.load(<string>unitData.join('\\n'));\r\n        this.unitsData.load(<string>unitUi.join('\\n'));\r\n        this.unitsData.load(<string>itemData.join('\\n'));\r\n        this.unitsData.load(<string>customUnit.join('\\n'));\r\n    }\r\n\r\n    /**\r\n     * 加载地形、悬崖和水面\r\n     */\r\n    async loadTerrainCliffsAndWater() {\r\n        const viewer = this.viewer;\r\n        const centerOffset = this.w3e.centerOffset;\r\n        const mapSize = this.w3e.mapSize;\r\n\r\n        this.corners = this.w3e.corners;\r\n        this.centerOffset.set(centerOffset);\r\n        this.mapSize.set(mapSize);\r\n\r\n        // Override the grid based on the map.\r\n        this.worldScene.grid = new this.worldScene.grid.constructor(centerOffset[0], centerOffset[1], mapSize[0] * 128 - 128, mapSize[1] * 128 - 128, 16 * 128, 16 * 128);\r\n\r\n        const tileset = this.w3e.tileset;\r\n        const tilesetTextures = [];\r\n        const cliffTextures = [];\r\n        const waterTextures = [];\r\n\r\n        for (const groundTileset of this.w3e.groundTilesets) {\r\n            const row = this.terrainData.getRow(groundTileset);\r\n\r\n            this.tilesets.push(row);\r\n\r\n            tilesetTextures.push(this.viewer.load(`${row.string('dir')}\\\\${row.string('file')}.blp`));\r\n        }\r\n\r\n        const blights = {\r\n            A: 'Ashen',\r\n            B: 'Barrens',\r\n            C: 'Felwood',\r\n            D: 'Cave',\r\n            F: 'Lordf',\r\n            G: 'Dungeon',\r\n            I: 'Ice',\r\n            J: 'DRuins',\r\n            K: 'Citadel',\r\n            L: 'Lords',\r\n            N: 'North',\r\n            O: 'Outland',\r\n            Q: 'VillageFall',\r\n            V: 'Village',\r\n            W: 'Lordw',\r\n            X: 'Village',\r\n            Y: 'Village',\r\n            Z: 'Ruins',\r\n        };\r\n\r\n        this.blightTextureIndex = tilesetTextures.length;\r\n        tilesetTextures.push(this.viewer.load(`TerrainArt\\\\Blight\\\\${blights[tileset]}_Blight.blp`));\r\n\r\n        for (const cliffTileset of this.w3e.cliffTilesets) {\r\n            const row = this.cliffTypesData.getRow(cliffTileset);\r\n\r\n            this.cliffTilesets.push(row);\r\n            cliffTextures.push(this.viewer.load(`${row.string('texDir')}\\\\${row.string('texFile')}.blp`));\r\n        }\r\n\r\n        const waterRow = this.waterData.getRow(`${tileset}Sha`);\r\n        this.waterHeightOffset = waterRow.number('height');\r\n        this.waterIncreasePerFrame = waterRow.number('texRate') / 60;\r\n        this.waterTextures.length = 0;\r\n        this.maxDeepColor.set([waterRow.number('Dmax_R'), waterRow.number('Dmax_G'), waterRow.number('Dmax_B'), waterRow.number('Dmax_A')]);\r\n        this.minDeepColor.set([waterRow.number('Dmin_R'), waterRow.number('Dmin_G'), waterRow.number('Dmin_B'), waterRow.number('Dmin_A')]);\r\n        this.maxShallowColor.set([waterRow.number('Smax_R'), waterRow.number('Smax_G'), waterRow.number('Smax_B'), waterRow.number('Smax_A')]);\r\n        this.minShallowColor.set([waterRow.number('Smin_R'), waterRow.number('Smin_G'), waterRow.number('Smin_B'), waterRow.number('Smin_A')]);\r\n\r\n        for (let i = 0, l = waterRow.number('numTex'); i < l; i++) {\r\n            waterTextures.push(this.viewer.load(`${waterRow.string('texFile')}${i < 10 ? '0' : ''}${i}.blp`));\r\n        }\r\n\r\n        /**\r\n         * 加载贴图\r\n         */\r\n        this.tilesetTextures = await Promise.all(tilesetTextures);\r\n        this.cliffTextures = await Promise.all(cliffTextures);\r\n        this.waterTextures = await Promise.all(waterTextures);\r\n\r\n        const corners = this.w3e.corners;\r\n        const [columns, rows] = this.mapSize;\r\n        const instanceCount = (columns - 1) * (rows - 1);\r\n        const cliffHeights = new Float32Array(columns * rows);\r\n        const cornerHeights = new Float32Array(columns * rows);\r\n        const waterHeights = new Float32Array(columns * rows);\r\n        const cornerTextures = new Uint8Array(instanceCount * 4);\r\n        const cornerVariations = new Uint8Array(instanceCount * 4);\r\n        const waterFlags = new Uint8Array(instanceCount);\r\n        let instance = 0;\r\n        const cliffs: { [key: string]: { locations: number[], textures: number[] } } = {};\r\n\r\n        this.columns = columns - 1;\r\n        this.rows = rows - 1;\r\n\r\n        for (let y = 0; y < rows; y++) {\r\n            for (let x = 0; x < columns; x++) {\r\n                const bottomLeft = corners[y][x];\r\n                const index = y * columns + x;\r\n\r\n                cliffHeights[index] = bottomLeft.groundHeight;\r\n                cornerHeights[index] = bottomLeft.groundHeight + bottomLeft.layerHeight - 2;\r\n                waterHeights[index] = bottomLeft.waterHeight;\r\n\r\n                if (y < rows - 1 && x < columns - 1) {\r\n                    // Water can be used with cliffs and normal corners, so store water state regardless.\r\n                    waterFlags[instance] = this.w3e.isWater(x, y);\r\n\r\n                    // Is this a cliff, or a normal corner?\r\n                    if (this.w3e.isCliff(x, y)) {\r\n                        const bottomLeftLayer = bottomLeft.layerHeight;\r\n                        const bottomRightLayer = corners[y][x + 1].layerHeight;\r\n                        const topLeftLayer = corners[y + 1][x].layerHeight;\r\n                        const topRightLayer = corners[y + 1][x + 1].layerHeight;\r\n                        const base = Math.min(bottomLeftLayer, bottomRightLayer, topLeftLayer, topRightLayer);\r\n                        const fileName = this.cliffFileName(bottomLeftLayer, bottomRightLayer, topLeftLayer, topRightLayer, base);\r\n\r\n                        if (fileName !== 'AAAA') {\r\n                            let cliffTexture = bottomLeft.cliffTexture;\r\n\r\n                            /// ?\r\n                            if (cliffTexture === 15) {\r\n                                cliffTexture = 1;\r\n                            }\r\n\r\n                            const cliffRow = this.cliffTilesets[cliffTexture];\r\n                            const dir = <string>cliffRow.string('cliffModelDir');\r\n                            const path = `Doodads\\\\Terrain\\\\${dir}\\\\${dir}${fileName}${getCliffVariation(dir, fileName, bottomLeft.cliffVariation)}.mdx`;\r\n\r\n                            if (!cliffs[path]) {\r\n                                cliffs[path] = { locations: [], textures: [] };\r\n                            }\r\n\r\n                            cliffs[path].locations.push((x + 1) * 128 + centerOffset[0], y * 128 + centerOffset[1], (base - 2) * 128);\r\n                            cliffs[path].textures.push(cliffTexture);\r\n                        }\r\n                    } else {\r\n                        const bottomLeftTexture = this.w3e.cornerTexture(x, y, this.tilesets, this.cliffTilesets);\r\n                        const bottomRightTexture = this.w3e.cornerTexture(x + 1, y, this.tilesets, this.cliffTilesets);\r\n                        const topLeftTexture = this.w3e.cornerTexture(x, y + 1, this.tilesets, this.cliffTilesets);\r\n                        const topRightTexture = this.w3e.cornerTexture(x + 1, y + 1, this.tilesets, this.cliffTilesets);\r\n                        const textures = unique([bottomLeftTexture, bottomRightTexture, topLeftTexture, topRightTexture]).sort();\r\n                        let texture = textures[0];\r\n\r\n                        cornerTextures[instance * 4] = texture + 1;\r\n                        cornerVariations[instance * 4] = this.getVariation(texture, bottomLeft.groundVariation);\r\n\r\n                        textures.shift();\r\n\r\n                        for (let i = 0, l = textures.length; i < l; i++) {\r\n\r\n                            let bitset = 0;\r\n\r\n                            texture = textures[i];\r\n\r\n                            if (bottomRightTexture === texture) {\r\n                                bitset |= 0b0001;\r\n                            }\r\n\r\n                            if (bottomLeftTexture === texture) {\r\n                                bitset |= 0b0010;\r\n                            }\r\n\r\n                            if (topRightTexture === texture) {\r\n                                bitset |= 0b0100;\r\n                            }\r\n\r\n                            if (topLeftTexture === texture) {\r\n                                bitset |= 0b1000;\r\n                            }\r\n\r\n                            cornerTextures[instance * 4 + 1 + i] = texture + 1;\r\n                            cornerVariations[instance * 4 + 1 + i] = bitset;\r\n                        }\r\n                    }\r\n\r\n                    instance += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        const gl = this.viewer.gl;\r\n        const webgl = this.viewer.webgl;\r\n\r\n        this.vertexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]), gl.STATIC_DRAW);\r\n\r\n        this.faceBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.faceBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([0, 1, 2, 1, 3, 2]), gl.STATIC_DRAW);\r\n\r\n        this.cliffHeightMap = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.cliffHeightMap);\r\n        webgl.setTextureMode(gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.NEAREST, gl.NEAREST);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, columns, rows, 0, gl.ALPHA, gl.FLOAT, cliffHeights);\r\n\r\n        this.heightMap = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.heightMap);\r\n        webgl.setTextureMode(gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.NEAREST, gl.NEAREST);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, columns, rows, 0, gl.ALPHA, gl.FLOAT, cornerHeights);\r\n\r\n        this.waterHeightMap = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.waterHeightMap);\r\n        webgl.setTextureMode(gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.NEAREST, gl.NEAREST);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, columns, rows, 0, gl.ALPHA, gl.FLOAT, waterHeights);\r\n\r\n        this.instanceBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(instanceCount).map((currentValue, index) => index), gl.STATIC_DRAW);\r\n\r\n        this.textureBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, cornerTextures, gl.STATIC_DRAW);\r\n\r\n        this.variationBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.variationBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, cornerVariations, gl.STATIC_DRAW);\r\n\r\n        this.waterBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.waterBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, waterFlags, gl.STATIC_DRAW);\r\n\r\n        this.terrainReady = true;\r\n        this.anyReady = true;\r\n\r\n        const cliffShader = this.cliffShader;\r\n\r\n        const cliffPromises = Object.entries(cliffs).map(async (cliff) => {\r\n            const path = cliff[0];\r\n            const { locations, textures } = cliff[1];\r\n            const buffer = await this.loadBaseFile(path, 'arrayBuffer');\r\n\r\n            if (buffer) {\r\n                return new TerrainModel(this, buffer, locations, textures, cliffShader);\r\n            }\r\n\r\n            return;\r\n        }).filter(x => x);\r\n\r\n        // Sometimes TS isn't the brightest.\r\n        const cliffPromisesForReal = <Promise<TerrainModel>[]>cliffPromises;\r\n\r\n        this.cliffModels = await Promise.all(cliffPromisesForReal);\r\n        this.cliffsReady = true;\r\n    }\r\n\r\n    /**\r\n     * 加载装饰物和可破坏装饰\r\n     */\r\n    async loadDoodadsAndDestructibles() {\r\n        const buf = await message.loadBlp('war3map.doo');\r\n        const parser = new War3MapDoo();\r\n        try {\r\n            parser.load(buf, 0);\r\n        } catch (e) {\r\n            console.warn(`Failed to load war3map.doo: ${e}`);\r\n            return;\r\n        }\r\n        // Doodads and destructibles.\r\n        for (const doodad of parser.doodads) {\r\n            try {\r\n                const row = this.doodadsData.getRow(doodad.id);\r\n                if (row) {\r\n                    let file = row.string('file');\r\n\r\n                    if (file) {\r\n                        const numVar = row.number('numVar');\r\n\r\n                        if (file.endsWith('.mdl')) {\r\n                            file = file.slice(0, -4);\r\n                        }\r\n\r\n                        let fileVar = file;\r\n\r\n                        file += '.mdx';\r\n\r\n                        if (numVar > 1) {\r\n                            fileVar += Math.min(doodad.variation, numVar - 1);\r\n                        }\r\n\r\n                        fileVar += '.mdx';\r\n\r\n                        this.viewer.load(fileVar).then((model) => {\r\n                            if (!model) return;\r\n                            this.doodads.push(new Doodad(this, model, row, doodad));\r\n                        });\r\n                    } else {\r\n                        console.log('Unknown doodad ID', doodad.id, doodad);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.warn(`Failed to load doodad/destructible ID ${doodad.id}: ${e}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载单位和物品\r\n     * @returns \r\n     */\r\n    async loadUnitsAndItems() {\r\n        const buf = await message.loadBlp('war3mapUnits.doo');\r\n\r\n        const parser = new War3MapUnitsDoo();\r\n\r\n        try {\r\n            parser.load(buf, 0);\r\n        } catch (e) {\r\n            console.warn(`Failed to load war3mapUnits.doo: ${e}`);\r\n            return;\r\n        }\r\n\r\n        // Collect the units and items data.\r\n        for (const unit of parser.units) {\r\n            try {\r\n                let row: MappedDataRow | undefined;\r\n                let path;\r\n\r\n                // Hardcoded?\r\n                if (unit.id === 'sloc') {\r\n                    path = 'Objects\\\\StartLocation\\\\StartLocation.mdx';\r\n                } else {\r\n                    row = this.unitsData.getRow(unit.id);\r\n                    if (row) {\r\n                        path = row.string('file');\r\n\r\n                        if (path) {\r\n                            if (path.endsWith('.mdl')) {\r\n                                path = path.slice(0, -4);\r\n                            }\r\n\r\n                            path += '.mdx';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (path) {\r\n                    this.viewer.load(path).then((model) => {\r\n                        if (!model) {\r\n                            return this.viewer.load('units/critters/sammycube/sammycube.mdx').then((model) => {\r\n                                if (!model) return;\r\n                                this.units.push(new Unit(this, model, row, unit));\r\n                            });\r\n                        }\r\n                        this.units.push(new Unit(this, model, row, unit));\r\n                    });\r\n                } else {\r\n                    console.log('Unknown unit ID', unit.id, unit);\r\n                }\r\n            } catch (e) {\r\n                console.warn(`Failed to load unit/item ID ${unit.id}: ${e}`);\r\n            }\r\n        }\r\n\r\n        this.unitsReady = true;\r\n        this.anyReady = true;\r\n    }\r\n\r\n    getVariation(groundTexture: number, variation: number): number {\r\n        const texture = this.tilesetTextures[groundTexture];\r\n\r\n        // Extended?\r\n        if (texture.width > texture.height) {\r\n            if (variation < 16) {\r\n                return 16 + variation;\r\n            } else if (variation === 16) {\r\n                return 15;\r\n            } else {\r\n                return 0;\r\n            }\r\n        } else {\r\n            if (variation === 0) {\r\n                return 0;\r\n            } else {\r\n                return 15;\r\n            }\r\n        }\r\n    }\r\n\r\n    cliffFileName(bottomLeftLayer: number, bottomRightLayer: number, topLeftLayer: number, topRightLayer: number, base: number): string {\r\n        return String.fromCharCode(65 + bottomLeftLayer - base) +\r\n            String.fromCharCode(65 + topLeftLayer - base) +\r\n            String.fromCharCode(65 + topRightLayer - base) +\r\n            String.fromCharCode(65 + bottomRightLayer - base);\r\n    }\r\n\r\n    /**\r\n   * Update the map.\r\n   */\r\n    update(): void {\r\n        if (this.anyReady) {\r\n            this.viewer.update();\r\n            // const worldScene = this.worldScene;\r\n            // worldScene.update(17);\r\n            this.waterIndex += this.waterIncreasePerFrame;\r\n\r\n            if (this.waterIndex >= this.waterTextures.length) {\r\n                this.waterIndex = 0;\r\n            }\r\n\r\n            for (const doodad of this.doodads) {\r\n                doodad.update();\r\n            }\r\n\r\n            for (const unit of this.units) {\r\n                unit.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.anyReady) {\r\n            const worldScene = this.worldScene;\r\n\r\n            worldScene.startFrame();\r\n            this.renderGround();\r\n            this.renderCliffs();\r\n            worldScene.renderOpaque();\r\n            this.renderWater();\r\n            worldScene.renderTranslucent();\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绘制地面\r\n     */\r\n    renderGround() {\r\n        if (this.terrainReady) {\r\n            const gl = this.viewer.gl;\r\n            const webgl = this.viewer.webgl;\r\n            const instancedArrays = <ANGLE_instanced_arrays>webgl.extensions['ANGLE_instanced_arrays'];\r\n            const shader = this.groundShader;\r\n            const uniforms = shader.uniforms;\r\n            const attribs = shader.attribs;\r\n            const tilesetTextures = this.tilesetTextures;\r\n            const instanceAttrib = attribs['a_InstanceID'];\r\n            const positionAttrib = attribs['a_position'];\r\n            const texturesAttrib = attribs['a_textures'];\r\n            const variationsAttrib = attribs['a_variations'];\r\n            const tilesetCount = tilesetTextures.length; // This includes the blight texture.\r\n\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n            webgl.useShader(shader);\r\n\r\n            gl.uniformMatrix4fv(uniforms['u_VP'], false, this.worldScene.camera.viewProjectionMatrix);\r\n            gl.uniform2fv(uniforms['u_offset'], this.centerOffset);\r\n            gl.uniform2f(uniforms['u_size'], this.columns, this.rows);\r\n            gl.uniform1i(uniforms['u_heightMap'], 15);\r\n\r\n            gl.activeTexture(gl.TEXTURE15);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.heightMap);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n            gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceBuffer);\r\n            gl.vertexAttribPointer(instanceAttrib, 1, gl.FLOAT, false, 0, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(instanceAttrib, 1);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.textureBuffer);\r\n            gl.vertexAttribPointer(texturesAttrib, 4, gl.UNSIGNED_BYTE, false, 0, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(texturesAttrib, 1);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.variationBuffer);\r\n            gl.vertexAttribPointer(variationsAttrib, 4, gl.UNSIGNED_BYTE, false, 0, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(variationsAttrib, 1);\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.faceBuffer);\r\n\r\n            gl.uniform1f(uniforms['u_baseTileset'], 0);\r\n\r\n            for (let i = 0, l = Math.min(tilesetCount, 15); i < l; i++) {\r\n                const isExtended = tilesetTextures[i].width > tilesetTextures[i].height ? 1 : 0;\r\n\r\n                gl.uniform1f(uniforms[`u_extended[${i}]`], isExtended);\r\n                gl.uniform1i(uniforms[`u_tilesets[${i}]`], i);\r\n\r\n                webgl.bindTexture(tilesetTextures[i], i);\r\n            }\r\n\r\n            instancedArrays.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this.rows * this.columns);\r\n\r\n            if (tilesetCount > 15) {\r\n                gl.uniform1f(uniforms['u_baseTileset'], 15);\r\n\r\n                for (let i = 0, l = tilesetCount - 15; i < l; i++) {\r\n                    const isExtended = tilesetTextures[i + 15].width > tilesetTextures[i + 15].height ? 1 : 0;\r\n\r\n                    gl.uniform1f(uniforms[`u_extended[${i}]`], isExtended);\r\n\r\n                    webgl.bindTexture(tilesetTextures[i + 15], i);\r\n                }\r\n\r\n                instancedArrays.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this.rows * this.columns);\r\n            }\r\n\r\n            instancedArrays.vertexAttribDivisorANGLE(texturesAttrib, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(variationsAttrib, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(instanceAttrib, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绘制悬崖\r\n     */\r\n    renderCliffs(): void {\r\n        if (this.cliffsReady) {\r\n            const gl = this.viewer.gl;\r\n            const webgl = this.viewer.webgl;\r\n            const instancedArrays = <ANGLE_instanced_arrays>webgl.extensions['ANGLE_instanced_arrays'];\r\n            const vertexArrayObject = <OES_vertex_array_object>webgl.extensions['OES_vertex_array_object'];\r\n            const shader = this.cliffShader;\r\n            const attribs = shader.attribs;\r\n            const uniforms = shader.uniforms;\r\n\r\n            gl.disable(gl.BLEND);\r\n\r\n            shader.use();\r\n\r\n            gl.uniformMatrix4fv(uniforms['u_VP'], false, this.worldScene.camera.viewProjectionMatrix);\r\n            gl.uniform1i(uniforms['u_heightMap'], 0);\r\n            gl.uniform2f(uniforms['u_pixel'], 1 / (this.columns + 1), 1 / (this.rows + 1));\r\n            gl.uniform2fv(uniforms['u_centerOffset'], this.centerOffset);\r\n            gl.uniform1i(uniforms['u_texture1'], 1);\r\n            gl.uniform1i(uniforms['u_texture2'], 2);\r\n\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.cliffHeightMap);\r\n\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.cliffTextures[0].webglResource);\r\n\r\n            if (this.cliffTextures.length > 1) {\r\n                gl.activeTexture(gl.TEXTURE2);\r\n                gl.bindTexture(gl.TEXTURE_2D, this.cliffTextures[1].webglResource);\r\n            }\r\n\r\n            // Set instanced attributes.\r\n            if (!vertexArrayObject) {\r\n                instancedArrays.vertexAttribDivisorANGLE(attribs['a_instancePosition'], 1);\r\n                instancedArrays.vertexAttribDivisorANGLE(attribs['a_instanceTexture'], 1);\r\n            }\r\n\r\n            // Render the cliffs.\r\n            for (const cliff of this.cliffModels) {\r\n                cliff.render(shader);\r\n            }\r\n\r\n            // Clear instanced attributes.\r\n            if (!vertexArrayObject) {\r\n                instancedArrays.vertexAttribDivisorANGLE(attribs['a_instancePosition'], 0);\r\n                instancedArrays.vertexAttribDivisorANGLE(attribs['a_instanceTexture'], 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绘制水面\r\n     */\r\n    renderWater(): void {\r\n        if (this.terrainReady) {\r\n            const gl = this.viewer.gl;\r\n            const webgl = this.viewer.webgl;\r\n            const instancedArrays = <ANGLE_instanced_arrays>webgl.extensions['ANGLE_instanced_arrays'];\r\n            const shader = this.waterShader;\r\n            const uniforms = shader.uniforms;\r\n            const attribs = shader.attribs;\r\n            const instanceAttrib = attribs['a_InstanceID'];\r\n            const positionAttrib = attribs['a_position'];\r\n            const isWaterAttrib = attribs['a_isWater'];\r\n\r\n            gl.depthMask(false);\r\n\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n            webgl.useShader(shader);\r\n\r\n            gl.uniformMatrix4fv(uniforms['u_VP'], false, this.worldScene.camera.viewProjectionMatrix);\r\n            gl.uniform2fv(uniforms['u_offset'], this.centerOffset);\r\n            gl.uniform2f(uniforms['u_size'], this.columns, this.rows);\r\n            gl.uniform1i(uniforms['u_heightMap'], 0);\r\n            gl.uniform1i(uniforms['u_waterHeightMap'], 1);\r\n            gl.uniform1i(uniforms['u_waterTexture'], 2);\r\n            gl.uniform1f(uniforms['u_offsetHeight'], this.waterHeightOffset);\r\n            gl.uniform4fv(uniforms['u_maxDeepColor'], this.maxDeepColor);\r\n            gl.uniform4fv(uniforms['u_minDeepColor'], this.minDeepColor);\r\n            gl.uniform4fv(uniforms['u_maxShallowColor'], this.maxShallowColor);\r\n            gl.uniform4fv(uniforms['u_minShallowColor'], this.minShallowColor);\r\n\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.heightMap);\r\n\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.waterHeightMap);\r\n\r\n            webgl.bindTexture(this.waterTextures[this.waterIndex | 0], 2);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n            gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 8, 0);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceBuffer);\r\n            gl.vertexAttribPointer(instanceAttrib, 1, gl.FLOAT, false, 4, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(instanceAttrib, 1);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.waterBuffer);\r\n            gl.vertexAttribPointer(isWaterAttrib, 1, gl.UNSIGNED_BYTE, false, 1, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(isWaterAttrib, 1);\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.faceBuffer);\r\n            instancedArrays.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this.rows * this.columns);\r\n\r\n            instancedArrays.vertexAttribDivisorANGLE(isWaterAttrib, 0);\r\n            instancedArrays.vertexAttribDivisorANGLE(instanceAttrib, 0);\r\n        }\r\n    }\r\n}","const shader = `\nuniform mat4 u_VP;\nuniform sampler2D u_heightMap;\nuniform vec2 u_pixel;\nuniform vec2 u_centerOffset;\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_uv;\nattribute vec3 a_instancePosition;\nattribute float a_instanceTexture;\n\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying float v_texture;\nvarying vec3 v_position;\n\nvoid main() {\n  // Half of a pixel in the cliff height map.\n  vec2 halfPixel = u_pixel * 0.5;\n\n  // The bottom left corner of the map tile this vertex is on.\n  vec2 corner = floor((a_instancePosition.xy - vec2(1.0, 0.0) - u_centerOffset.xy) / 128.0);\n\n  // Get the 4 closest heights in the height map.\n  float bottomLeft = texture2D(u_heightMap, corner * u_pixel + halfPixel).a;\n  float bottomRight = texture2D(u_heightMap, (corner + vec2(1.0, 0.0)) * u_pixel + halfPixel).a;\n  float topLeft = texture2D(u_heightMap, (corner + vec2(0.0, 1.0)) * u_pixel + halfPixel).a;\n  float topRight = texture2D(u_heightMap, (corner + vec2(1.0, 1.0)) * u_pixel + halfPixel).a;\n  \n  // Do a bilinear interpolation between the heights to get the final value.\n  float bottom = mix(bottomRight, bottomLeft, -a_position.x / 128.0);\n  float top = mix(topRight, topLeft, -a_position.x / 128.0);\n  float height = mix(bottom, top, a_position.y / 128.0);\n\n  v_normal = a_normal;\n  v_uv = a_uv;\n  v_texture = a_instanceTexture;\n  v_position = a_position + vec3(a_instancePosition.xy, a_instancePosition.z + height * 128.0);\n\n  gl_Position = u_VP * vec4(v_position, 1.0);\n}\n`;\n\nexport default shader;\n","const shader = `\nuniform mat4 u_VP;\nuniform sampler2D u_heightMap;\nuniform sampler2D u_waterHeightMap;\nuniform vec2 u_size;\nuniform vec2 u_offset;\nuniform float u_offsetHeight;\nuniform vec4 u_minDeepColor;\nuniform vec4 u_maxDeepColor;\nuniform vec4 u_minShallowColor;\nuniform vec4 u_maxShallowColor;\n\nattribute vec2 a_position;\nattribute float a_InstanceID;\nattribute float a_isWater;\n\nvarying vec2 v_uv;\nvarying vec4 v_color;\n\nconst float minDepth = 10.0 / 128.0;\nconst float deepLevel = 64.0 / 128.0;\nconst float maxDepth = 72.0 / 128.0;\n\nvoid main() {\n  if (a_isWater > 0.5) {\n    v_uv = a_position;\n\n    vec2 corner = vec2(mod(a_InstanceID, u_size.x), floor(a_InstanceID / u_size.x));\n    vec2 base = corner + a_position;\n    float height = texture2D(u_heightMap, base / u_size).a;\n    float waterHeight = texture2D(u_waterHeightMap, base / u_size).a + u_offsetHeight;\n    float value = clamp(waterHeight - height, 0.0, 1.0);\n\n    if (value <= deepLevel) {\n      value = max(0.0, value - minDepth) / (deepLevel - minDepth);\n      v_color = mix(u_minShallowColor, u_maxShallowColor, value) / 255.0;\n    } else {\n      value = clamp(value - deepLevel, 0.0, maxDepth - deepLevel) / (maxDepth - deepLevel);\n      v_color = mix(u_minDeepColor, u_maxDeepColor, value) / 255.0;\n    }\n\n    gl_Position = u_VP * vec4(base * 128.0 + u_offset, waterHeight * 128.0, 1.0);\n  } else {\n    v_uv = vec2(0.0);\n    v_color = vec4(0.0);\n\n    gl_Position = vec4(0.0);\n  }\n}\n`;\n\nexport default shader;\n","/**\n * Returns an array that only contains unique values found in the source array.\n */\nexport default function unique<T>(a: T[]): T[] {\n  return a.reverse().filter((e, i, arr) => {\n    return arr.indexOf(e, i + 1) === -1;\n  }).reverse();\n}\n","/**\r\n * 地图查看器\r\n */\r\nimport { setupCamera } from \"./camera\";\r\nimport MapViewer from \"./mapViewer\";\r\n\r\nconst handlers = ModelViewer.viewer.handlers;\r\nconst common = ModelViewer.common;\r\nconst glMatrix = common.glMatrix;\r\nconst vec3 = glMatrix.vec3;\r\nconst quat = glMatrix.quat;\r\n\r\nlet canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\ncanvas.width = 800;\r\ncanvas.height = 600;\r\n\r\n// Create the viewer!\r\nlet viewer = new ModelViewer.viewer.ModelViewer(canvas);\r\nviewer.debugRenderMode = ModelViewer.viewer.DebugRenderMode.None;\r\n\r\n// Create a new scene. Each scene has its own camera, and a list of things to render.\r\nlet scene = viewer.addScene();\r\n\r\n// Check camera.js!\r\nsetupCamera(scene);\r\n\r\n// Events.\r\nviewer.on('loadstart', (e) => console.log(e));\r\nviewer.on('load', (e) => console.log('load', e));\r\nviewer.on('loadend', (e) => console.log('loadend', e));\r\nviewer.on('error', (e) => console.log('error', e));\r\n\r\n// Add the MDX handler.\r\n// Note that this also loads all of the team colors/glows.\r\n// You can optionally supply a path solver (look below) to point the viewer to the right location of the textures.\r\n// Additionally, a boolean can be given that selects between RoC/TFT and Reforged team colors.\r\n// For example:\r\n//   viewer.addHandler(handlers.mdx, pathSolver); // Roc/TFT = 14 teams.\r\n//   viewer.addHandler(handlers.mdx, pathSolver, true); // Reforged = 28 teams.\r\n// In the case of this example, team colors aren't used, so it's fine for their loads to simply fail.\r\nviewer.addHandler(handlers.mdx);\r\n\r\n// Add the BLP handler.\r\nviewer.addHandler(handlers.blp);\r\n// Add the DDS handler.\r\nviewer.addHandler(handlers.dds);\r\n// Add the TGA handler.\r\nviewer.addHandler(handlers.tga);\r\n\r\ndocument.querySelector('.controls').remove();\r\n\r\n// @ts-ignore\r\nwindow.fetch = async function (path: string) {\r\n    /**\r\n     * 优先查找resource下面的文件\r\n     */\r\n    const resourceBuf = await message.loadResource(path);\r\n    if (!resourceBuf) {\r\n        const buf = await message.loadBlp(path);\r\n        return {\r\n            ok: true,\r\n            arrayBuffer: () => buf,\r\n        };\r\n    }\r\n    return {\r\n        ok: true,\r\n        arrayBuffer: () => resourceBuf,\r\n    };\r\n};\r\n\r\nmessage.load().then(({ buf, ext }) => {\r\n    const map = new MapViewer(viewer, scene, buf);\r\n    // The viewer has the update(), startFrame(), render(), and updateAndRender() functions.\r\n    // Generally speaking, you will want a simple never ending loop like the one that follows, but who knows. The control is in your hands.\r\n    function step(timestamp: number) {\r\n        requestAnimationFrame(step);\r\n\r\n        map.render();\r\n    }\r\n    requestAnimationFrame(step);\r\n});\r\n"],"sourceRoot":""}